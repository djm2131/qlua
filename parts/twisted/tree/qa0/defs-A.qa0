;; Macros for A and A* (also for 1/A and 1/A*)
(define (load-twist res-x res-y tw-addr)
    (load double () x-re ([reg tw-addr] [const (offset-of twist x-re)]))
    (load double () x-im ([reg tw-addr] [const (offset-of twist x-im)]))
    (op complex () (res-x) ([reg x-re] [reg x-im]))
    (load double () y-re ([reg tw-addr] [const (offset-of twist y-re)]))
    (load double () y-im ([reg tw-addr] [const (offset-of twist y-im)]))
    (op complex () (res-y) ([reg y-re] [reg y-im])))

(define (S-compute-A-val res x-val y-val s)
  (op nop (start compute-A-val) () ())
  (op qcd-complex-scalef-lo () (res) ([reg x-val] [reg s]))
  (op qcd-complex-scalef-hi () (res) ([reg y-val] [reg s]))
  (op nop (end compute-A-val) () ()))

(define (S-compute-A res x-val y-val src-addr)
  (op nop (start compute-A) () ())
  (load qcd-fermion () s ([reg src-addr]))
  (op pointer-add () (src-addr) ([reg src-addr] [const (size-of Fermion)]))
  (macro S-compute-A-val [reg res] [reg x-val] [reg y-val] [reg s])
  (op nop (end compute-A) () ()))

(define (S-compute-A*-val res x-val y-val s)
  (op nop (start compute-A-val) () ())
  (op qcd-complex-conj-scalef-lo () (res) ([reg x-val] [reg s]))
  (op qcd-complex-conj-scalef-hi () (res) ([reg y-val] [reg s]))
  (op nop (end compute-A-val) () ()))

(define (S-compute-A* res x-val y-val src-addr)
  (op nop (start compute-A*) () ())
  (load qcd-fermion () s ([reg src-addr]))
  (op pointer-add () (src-addr) ([reg src-addr] [const (size-of Fermion)]))
  (macro S-compute-A*-val [reg res] [reg x-val] [reg y-val] [reg s])
  (op nop (end compute-A*) () ()))
