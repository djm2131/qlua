require("test_fields")

if (nil == test_dir
       or nil == h5_file          -- hdf file
       or nil == h5_path          -- hdf path
       or nil == latsize          -- lattice size
       or nil == t_axis           -- time axis 0 .. D-1
       or nil == laph_pw3_list    -- list of pw.'s to generate LapH vectors
       or nil == laph_pw_x0       -- starting point for LapH pw.'s
       or nil == laph_col_list    -- list of colors to generate LapH vectors [col]
       or nil == laph_texp        -- list of exps to generate LapH vectors [col]
       or nil == prop_pw3_sh      -- pw.'s to mult propagator, dep. on spin [spin_src]
       or nil == prop_pw_x0       -- starting point for prop mom shift pw
       or nil == prop_texp_sh     -- exponents to mult propagator, dep. on spin [spin_src]
       or nil == ft_p3_list       -- FT momenta list
       or nil == ft_x0            -- FT starting point
       or nil == tstep            -- time step
       or nil == src_snk_dt_max   -- maximal src-snk dist
       ) then 
  print "have unset parameters"
  os.exit(1)
end

require("stdlib")
function print_list(l, name)
  if nil ~= name then printf("%s=", name) end
  if 0 == #l then printf("{}\n")
  else
    printf("{%s", l[1])
    for i = 2, #l do
      printf(", %s", l[i])
    end
    printf("}\n")
  end
end

L = qcd.lattice(latsize)
print_subgrid_settings(L)
lt= L[t_axis]

laph_dep_col = {}
for j = 1, #laph_col_list do 
  laph_dep_col[j] = (laph_texp[j] * latR_lin(L, t_axis, laph_pw_x0[1+t_axis])):exp()
end
list_v = make_latcolvec_list_pw_c_expt(L, t_axis, laph_pw3_list, laph_pw_x0, 
              laph_col_list, nil, laph_dep_col)


local n_t12op = 0
for tsrc = 0, lt - 1, tstep do
  for dt = 2*tstep, src_snk_dt_max, tstep do
    for dtau = tstep, dt - tstep, tstep do
      n_t12op = n_t12op + 1
    end
  end
end

local i_t12op = 0
for tsrc = 0, lt - 1, tstep do
  -- make src props
  local prop_dep_spin_src = {}
  for j_s = 0, 3 do
    prop_dep_spin_src[1+j_s] = ((prop_texp_sh[1+j_s] * latR_dist(L, t_axis, tsrc)):exp() *
                            L:planewave(prop_pw_x0, space2full(prop_pw3_sh[1+j_s], t_axis)))
  end
  src_sol_list = {}
  local cnt = 0
  for j_v = 0, #list_v - 1 do
    local prop = make_4latdirferm_t(list_v[1+j_v], t_axis, 
                    {0,0,0}, {0,0,0, tsrc}, prop_dep_spin_src)
    for j_s = 0, 3 do
      src_sol_list[cnt + 1+j_s] = {tsrc, j_v, j_s, prop[1+j_s]}
    end
    cnt = cnt + 4
  end

  for dt = 2*tstep, src_snk_dt_max, tstep do
    tsnk = (lt + tsrc + dt) % lt

    -- make t_op list
    local cnt = 0
    local t_op_list = {}
    local i12op_list = {}
    local cur_i_t12op = i_t12op
    for dtau = tstep, dt - tstep, tstep do
      t_op_list[1+cnt] = (lt + tsrc + dtau) % lt
      i12op_list[1+cnt]= i_t12op
      cnt = cnt + 1
      i_t12op = i_t12op + 1
    end

    -- make snk props
    local prop_dep_spin_snk = {}
    for j_s = 0, 3 do
      prop_dep_spin_snk[1+j_s] = ((prop_texp_sh[1+j_s] * latR_dist(L, t_axis, tsnk)):exp() *
                          L:planewave(prop_pw_x0, space2full(prop_pw3_sh[1+j_s], t_axis)))
    end
    snk_sol_list = {}
    cnt = 0
    for j_v = 0, #list_v - 1 do
      local prop = make_4latdirferm_t(list_v[1+j_v], t_axis,
                      {0,0,0}, {0,0,0, tsnk}, prop_dep_spin_snk)
      for j_s = 0, 3 do
        snk_sol_list[cnt + 1+j_s] = {tsnk, j_v, j_s, prop[1+j_s]}
      end
      cnt = cnt + 4
    end
    printf("tsrc=%d, tsnk=%d, #t_op=%d, #src=%d, #snk=%d, i_t12op=%d:%d/%d\n", 
           tsrc, tsnk, #t_op_list, #src_sol_list, #snk_sol_list,
           cur_i_t12op, i_t12op, n_t12op)
    print_list(t_op_list, "t_op_list")
    print_list(i12op_list, "i12op_list")

    qcd.save_q3pt_selectspin(test_dir .. '/' .. h5_file, h5_path, 
                             #list_v, src_sol_list, snk_sol_list, 
                             t_axis, ft_x0, ft_p3_list,
                             t_op_list, cur_i_t12op, n_t12op)
  end
end

printf("QLUA_RUN_SUCCESS\n")
