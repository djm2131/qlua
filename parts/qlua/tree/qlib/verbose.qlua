
function print_network_settings()
  local ms, s 
  ms, s = qcd.network()
  local s_str=''
  if s[1] then
    s_str = string.format('%3d', s[1])
    for i = 2, #s do s_str = s_str .. string.format(' %3d', s[i]) end
  end
  printf("network: %d nodes [%s]\n", ms, s_str)
end
function print_subgrid_settings(L)
  local ln = L:network()
  local ln_str = string.format('%3d', ln[1])
  local sg_str = string.format('%3d', L[0] / ln[1])
  for i = 2, #ln do
    ln_str = ln_str .. string.format(' %3d', ln[i])
    sg_str = sg_str .. string.format(' %3d', L[i-1] / ln[i])
  end
  printf("%s: network=[%s] subgrid=[%s]\n", tostring(L), ln_str, sg_str)
end

-- moved from qop tests and simplified [sns 2015/10/13]
function print_obj(t, name)
  name  = name or tostring(t)
  if type(t) == "table" then
    printf("%s : TABLE\n", name)
    local t_mt = getmetatable(t)
    if t_mt then 
      print_obj(t_mt, string.format("%s.META", name))
    end
    for i, v in pairs(t) do
      local name_i = string.format("%s[%s]", name, tostring(i))
      if '__index' == i then printf("%s : %s\n", name_i, tostring(v))
      else print_obj(v, name_i) end
    end
  else
    printf("%s : (%s) %s\n", name, type(t), tostring(t))
  end
end

function spprint_table(t, indent, level, spprint_elem)
  -- pretty-print a table into a string 
  -- level: how many nested levels to put onto a separate line
  spprint_elem = spprint_elem or tostring
  local ind_sh = '  ' -- for each new level
  local tab_start = '{ '
  local tab_end   = ' }'
  local tab_sep   = ', '
  if 'table' == type(t) then
    local sep = tab_sep
    local newindent = indent .. ind_sh
    local newlevel = nil
    if nil ~= level then newlevel = level - 1 end
    if nil == level or 0 < level then
      sep = string.format(',\n%s', newindent)
    end
    if #t <= 0 then return '{}'
    else
      local res = string.format('%s%s', tab_start, 
          spprint_table(t[1], newindent, newlevel, spprint_elem))
      for it=2, #t do
        res = string.format('%s%s%s', res, sep,
          spprint_table(t[it], newindent, newlevel, spprint_elem))
      end
      return string.format('%s%s', res, tab_end)
    end
  else return spprint_elem(t) end
end

function print_mem_usage_short(msg)
  if nil == msg then msg = "" end
  local mem_str = string.format("%s:", msg)
  local mem_tab = {}
  for i,v in pairs(qcd.memory_usage()) do
    local data_str = '?'
    if      'Random'  == i then data_str = 'S'
    elseif  'Int'     == i then data_str = 'I'
    elseif  'Real'    == i then data_str = 'R'
    elseif  'Complex' == i then data_str = 'C'
    elseif  string.find(i, '^ColorVector')      then data_str = 'V'
    elseif  string.find(i, '^ColorMatrix')      then data_str = 'M'
    elseif  string.find(i, '^DiracFermion')     then data_str = 'D'
    elseif  string.find(i, '^DiracPropagator')  then data_str = 'P'
    end
    mem_tab[data_str] = (mem_tab[data_str] or 0) + v
  end
  for i,data_str in pairs({'S', 'I', 'R', 'C', 'V', 'M', 'D', 'P' }) do
    mem_str = string.format("%s %6d%s", mem_str,
                (mem_tab[data_str] or 0), data_str)
  end
  printf("%s\n", mem_str)
end

