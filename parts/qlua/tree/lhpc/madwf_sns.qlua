-- this code comes originally from Michael Engelhardt
-- it has been adapted by SNS for arbitrary external Mobius and PV solvers

-- TODO replace 
--    convert_fermion_D4_to_D5 convert_fermion_D5_to_D4 
--    mdwf_norm2 mdwf_sub mdwf_add
--  with latvec functions
-- TODO simplify main cycle code, remove project_pm
-- TODO replace D(m)^{-1}.D(1) -> (1+(1-m)*D(m)^{-1} ZY)
-- TODO try iterations wrt 4d vector only (check if applicable for the full 5d)

require 'strict'
require 'latvec'
require 'lhpc-std'



do
  local function project_p(src_d5, L5)
    local p_src_d5 = {}
    for s = 0, L5-1 do p_src_d5[1+s] = L:DiracFermion() end
    for s = 0, L5-2 do
      p_src_d5[1+s]=0.5*((1-gamma{n=15})*src_d5[1+s]+(1+gamma{n=15})*src_d5[2+s])
    end
    p_src_d5[L5]=0.5*((1-gamma{n=15})*src_d5[L5]+(1+gamma{n=15})*src_d5[1])
    return p_src_d5
  end

  local function project_m(src_d5, L5)
    local p_src_d5 = {}
    for s = 0, L5-1 do p_src_d5[1+s] = L:DiracFermion() end
    p_src_d5[1]=0.5*((1+gamma{n=15})*src_d5[L5]+(1-gamma{n=15})*src_d5[1])
    for s = 1, L5-1 do
      p_src_d5[1+s]=0.5*((1+gamma{n=15})*src_d5[s]+(1-gamma{n=15})*src_d5[1+s])
    end
    return p_src_d5
  end

  local function extract_first_component(src_d5)
    local src_d4 = {}
    src_d4 = L:DiracFermion()
    src_d4 = src_d5[1]
    return src_d4
  end

  local function add_zeros_in_5d(src_d4, L5)
    local src_d5 = {}
    for s = 0, L5-1 do src_d5[1+s] = L:DiracFermion() end
    src_d5[1] = src_d4
    return src_d5
  end

  local function convert_fermion_D4_to_D5(src_d4, L5)
    local src_d5 = {}
    for s = 1, L5-2 do src_d5[1+s] = L:DiracFermion() end
    -- includes reversal of 5th dimension
    src_d5[1] = 0.5 * (1 + gamma{n=15}) * src_d4
    src_d5[L5]= 0.5 * (1 - gamma{n=15}) * src_d4
    return src_d5
  end

  local function convert_fermion_D5_to_D4(prop_d5, L5)
    return 0.5 * ((1 - gamma{n=15}) * prop_d5[1] +
	          (1 + gamma{n=15}) * prop_d5[L5])
  end

  local function mdwf_norm2(F)
    local n = 0
    for i = 1, #F do
      n = n + F[i]:norm2()
    end
    return n
  end

  local function mdwf_sub(A,B)
    local X = {}
    for i = 1, #A do
      X[i] = A[i] - B[i]
    end
    return X
  end

  local function mdwf_add(A,B)
    local X = {}
    for i = 1, #A do
      X[i] = A[i] + B[i]
    end
    return X
  end


  function make_solver_MADCG_g5herm(
      gauge_u, ferm_bc,
      mq, M5,
      L5_c, b5_c, c5_c,
      L5_f, b5_f, c5_f,
      madwf_iter,
      opt   -- optional table
            --  eps2_1,maixter_1      single-prec restart
            --  solver_i              initial solver OR
            --  eps2_i,maxiter_i      params for ini solver if no opt.solver_i
            --  solver_f              final solver OR
            --  eps2_f,maxiter_f      params for fin solver if no opt.solver_f
            --  solver_m1             M5=1 solver OR
            --  eps2_m1,maxiter_m1    params for M5=1 solver if no opt.solver_m1
            --  mdwf_opt              params for qcd.MDWF
      )
    local opt = opt or {}
    local mdwf_opt = opt.mdwf_opt or {}
    local eps2_1      = opt.eps2_1 or 1e-10
    local maxiter_1   = opt.maxiter_1 or 10000

    local gauge_u_bc  = gauge_copy(gauge_u)
    gauge_apply_boundary(gauge_u_bc, ferm_bc)

    local function zero_solver(rhs)
      return latvec_scal_left(0., rhs)
    end

    local DW_c_m1_D = function(x) 
      return latvec_op_dslash_moebius(x, gauge_u_bc, M5, 1., b5_c, c5_c) 
    end
    local DW_f_D = function(x)
      return latvec_op_dslash_moebius(x, gauge_u_bc, M5, mq, b5_f, c5_f)
    end
    local mdminus_lo  = function(x)
      return latvec_scal_left(-1., 
                  latvec_op_mdwf_dminus(gauge_u_bc, M5, c5_f, x))
    end
    -- mq c solver: get or set default
    local DW_c = nil
    local solver_moeb = opt.solver_moeb 
    if nil == solver_moeb then
      DW_c = DW_c or qcd.MDWF.generic(gauge_u, ferm_bc, L5_c, M5, mq, b5_c, c5_c, mdwf_opt)
      local eps2_moeb     = opt.eps2_moeb     or 1.5e-8 
      local maxiter_moeb  = opt.maxiter_moeb  or 10000
      printf("make_solver_MADCG_g5herm: DEFAULT Moebius mixed_solver(%.1e,%d,%.1e,%d)\n",
                  eps2_1, maxiter_1, eps2_moeb, maxiter_moeb)
      solver_moeb = DW_c:mixed_solver(eps2_1, maxiter_1, eps2_moeb, maxiter_moeb)
    end
    -- m=1 f solver: get or set default
    local solver_m1 = opt.solver_m1
    if nil == solver_m1 then
      local DW_f_m1     = qcd.MDWF.generic(gauge_u, ferm_bc, L5_f, M5, 1.0, b5_f, c5_f, mdwf_opt)
      local eps2_m1     = opt.eps2_m1     or 1.5e-8 
      local maxiter_m1  = opt.maxiter_m1  or 1000
      printf("make_solver_MADCG_g5herm: DEFAULT M=1 mixed_solver(%.1e,%d,%.1e,%d)\n",
                  eps2_1, maxiter_1, eps2_m1, maxiter_m1)
      solver_m1       = DW_f_m1:mixed_solver(eps2_1, maxiter_1, eps2_m1, maxiter_m1)
    end
    -- initial solver: get or set default
    local DW_f  = nil
    local solver_i = opt.solver_i 
    if nil == solver_i and opt.eps2_i then
      DW_f  = DW_f or qcd.MDWF.generic(gauge_u, ferm_bc, L5_f, M5, mq, b5_f, c5_f, mdwf_opt)
      local eps2_i      = opt.eps2_i    or 5e-6
      local maxiter_i   = opt.maxiter_i or 1000
      printf("make_solver_MADCG_g5herm: INITIAL mixed_solver(%.1e,%d,%.1e,%d)\n",
                  eps2_1, maxiter_1, eps2_i, maxiter_i)
      solver_i  = DW_f:mixed_solver(eps2_1, maxiter_1, eps2_i, maxiter_i)
    else 
      printf("make_solver_MADCG_g5herm: no INITIAL solver\n")
      solver_i  = zero_solver
    end

    -- final solver: get or set default
    local solver_f = opt.solver_f 
    if nil == solver_f and opt.eps2_f then
      DW_f  = DW_f or qcd.MDWF.generic(gauge_u, ferm_bc, L5_f, M5, mq, b5_f, c5_f, mdwf_opt)
      local eps2_f      = opt.eps2_f      or 5e-5
      local maxiter_f   = opt.maxiter_f   or 1000
      printf("make_solver_MADCG_g5herm: FINAL mixed_solver(%.1e,%d,%.1e,%d)\n",
                  eps2_1, maxiter_1, eps2_f, maxiter_f)
      solver_f  = DW_f:mixed_solver(eps2_1, maxiter_1, eps2_f, maxiter_f)
    else 
      printf("make_solver_MADCG_g5herm: no FINAL solver\n")
      solver_f  = zero_solver
    end

    return make_solver_MADCG(
        solver_i, solver_f,
        L5_c, DW_c_m1_D, solver_moeb,
        L5_f, DW_f_D, solver_m1,
        madwf_iter,
        { mdminus_lo = mdminus_lo }
        )
  end

  function make_solver_MADCG(
      solver_i, solver_f,   -- initial and final solvers
      L5_c,                 -- l5_sh,
      DW_c_m1_D,            -- dslash5d_m1_sh,
      solver_moeb,          -- solver5d_mq_sh,
      L5_f,                 --l5_lo,
      DW_f_D,
      solver_m1,            -- solver5d_m1_lo,
      iterations,            --maxiter
      opt -- optional table
        -- mdminus_lo   in case multiplication by mdminus is required
      )
    -- create solvers
    local opt = opt or {}
    local mdminus_f = opt.mdminus_f or function(x)return x end

    local function solver_5d(rhs, print_residual, p1, p2)
      printf("MADCG solver: L5_f=%d L5_c=%d; Mobius iterations = %d\n", L5_f, L5_c, iterations)
      local madcg_timer = timer("MADCG")
      local norm2_srce = nil
      local rhs0  = rhs
      local rhs = mdminus_f(rhs)        ; force_gc()  -- XXX debug
      print_latvec_cmp(rhs0, rhs, "rhs<->mdminus(rhs)")
      if print_residual then norm2_srce = mdwf_norm2(rhs) end

      -- initial solve
      local sol = solver_i(rhs, p1, p2)
      do
        local Dx = DW_f_D(sol)
        rhs = mdwf_sub(rhs, Dx)         ; Dx = nil ; force_gc()
      end

      if print_residual then
        local norm2_diff = mdwf_norm2(rhs)
        printf("norm2_diff/norm2_srce = %25.15e\n", norm2_diff/norm2_srce)
      end


      -- Mobius solves
      for i = 1, iterations do
        force_gc()
        local a = solver_m1(rhs, p1, p2)
        local c = project_m(a, L5_f)    ; force_gc()
        a = extract_first_component(c)  ; force_gc()
        a = add_zeros_in_5d(a, L5_c)    ; force_gc() -- c_moebius
        a = project_p(a, L5_c)          ; force_gc()
        a = DW_c_m1_D(a)                ; force_gc() -- b_moebius
        a = solver_moeb(a, p1, p2)      ; force_gc() -- y_moebius
	a = project_m(a, L5_c)          ; force_gc()
        a = extract_first_component(a)  ; force_gc() -- y1
        a = add_zeros_in_5d(a, L5_f)    ; force_gc()
        c = mdwf_add(c, a)              ; force_gc() -- (y1,0,...,0)+c
        a = project_p(a, L5_f)          ; force_gc()
        a = DW_f_D(a)                   ; force_gc()
        a = solver_m1(a, p1, p2)        ; force_gc()
        a = project_m(a, L5_f)          ; force_gc()
        a = mdwf_sub(c, a)              ; c = nil ; force_gc() -- y   
        a = project_p(a, L5_f)          ; force_gc() -- x
        sol = mdwf_add(sol, a)          ; force_gc()
        a = DW_f_D(a)                   ; force_gc() -- Dx
        rhs = mdwf_sub(rhs, a)          ; a = nil ; force_gc()
        if print_residual then
          local norm2_diff = mdwf_norm2(rhs)
          printf("norm2_diff/norm2_srce = %25.15e\n", norm2_diff/norm2_srce)
        end
        force_gc()
      end

      -- final solve
      do
        local x = solver_f(rhs, p1, p2)
        sol = mdwf_add(sol, x)          ; x = nil ; force_gc()
        if print_residual then
          x = DW_f_D(x)
          rhs = mdwf_sub(rhs, x)        ; x = nil ; force_gc()
          local norm2_diff = mdwf_norm2(rhs)
          printf("norm2_diff/norm2_srce = %25.15e\n", norm2_diff/norm2_srce)
        end
      end

      madcg_timer("done")
      rhs = nil ; rhs0 = nil ; force_gc()
      return sol
    end

    local function solver_dirferm(rhs, print_residual, p1, p2)
      local x = convert_fermion_D4_to_D5(rhs, L5_f)
      x = solver_5d(x, print_residual, p1, p2) ; force_gc()
      x = convert_fermion_D5_to_D4(x, L5_f) ; force_gc()
      return x
    end

    local function solver_dirprop(rhs, print_residual, p1, p2)
      local sol = L:DiracPropagator()
      for c = 0, 2 do
        for d = 0, 3 do
          local src = rhs[{c=c,d=d}]
          printf("solving DiracPropagator c = %d, d = %d\n", c, d)
          sol[{c=c,d=d}] = solver_dirferm(src, print_residual, p1, p2) ; src = nil ; force_gc()
        end
      end
      return sol
    end

    local cnt = 0
    return function(x, p0, p1, p2)
      local s = tostring(x)
      cnt = cnt + 1
      local inv_timer = timer(string.format("[%d]MADCG dirac_inv(%s)", cnt, s))
      local y = nil
      if string.find(s, "^table") and #x == L5_f then
        y = solver_5d(x, p0, p1, p2)
      elseif string.find(s, "^QDP:DiracFermion") then
        y = solver_dirferm(x, p0, p1, p2)
      elseif string.find(s, "^QDP:DiracPropagator") then
        y = solver_dirprop(x, p0, p1, p2)
      else
        printf("Bad argument to MADCG solver: %s\n", s)
        os.exit(1)
      end
      inv_timer('done')
      return y
    end
  end
end
