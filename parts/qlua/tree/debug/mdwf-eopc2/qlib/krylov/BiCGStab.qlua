-- Bi-Conjugate gradient stabilized
--  Paramenters
--    MaxIterations       1000 -- never use more than this number of iterations
--    MinIterations          0 -- minimal number of iterations to do
--    RelativeError       1e-7 -- stop when A:error(x,b)/A:norm(b) < re
--    AbsoluteError      false -- stop when A:error(x,b) < ae
--    TrueResidual       false -- use A:error(x,b) to compute errors
--    Logging            false -- store residual in status.Norms[]
--    ConvergenceFactor  false -- stop if (X:dot(r,r)/X:dot(b,b))^(1/(2*iter)) > cf
--    ZeroGuard         2e-209 -- consider number <= zg to be zero
--
-- Status elements
--    Status            -- "OK" if solved, else some other string
--    Syndrome          -- human-readable reason for status
--    Iterations        -- number of iterations used
--    RealtiveResidual  -- X:error(x,b)/X:norm(b)
--    AbsoluteResidual  -- X:error(x,b)
--    RHSNorm           -- X:norm(b)
--    SolutionNorm      -- X:norm(x)
--    Norms             -- vector of relative residuals (or an empty vector)

function makeBiCGStab(t)
   local solver = {} -- object placeholder
   local function is_number(x) -- true if x is not Inf or NaN
      if x == 0 then
         return true
      else
         local v = x / x    -- convert Inf and NaN into NaN
         return v == v      -- assume ANSI 754 semantics
      end
   end
   local min_iter            = t.MinIterations       or      0
   local max_iter            = t.MaxIterations       or   1000
   local rel_error           = t.RelativeError       or   1e-7
   local abs_error           = t.AbsoluteError       or  false
   local true_residual       = t.TrueResidual        or  false
   local logging             = t.Logging             or  false
   local convergence_factor  = t.ConvergenceFactor   or  false
   local zero_guard          = t.ZeroGuard           or 1e-209

   local function solve(b,A,x0)
      local status = { Status = "DIVERGED", Solver = "BiCGStab" }
      local x = x0 or A:zeroVector()
      local b_norm = math.sqrt(A:dot(b,b))
      local x_norm = math.sqrt(A:dot(x,x))
      local b_true_norm = A:norm(b)
      local x_true_norm = A:norm(x)
      local norms = {}
      if (not is_number(b_norm)) or (not is_number(x_norm)) then
         status.Status = "ERROR"
         status.Syndrome = "NaN input"
         status.Iterations = 0
         return x, status
      end
      local denom = b_norm
      if denom == 0 then
         denom = x_norm
      end
      if denom == 0 then
         status.Status = "OK"
         status.Syndrome = "Both RHS and guess are zero"
         status.Iterations = 0
         return x, status
      end
      local epsilon = 1
      local efactor = 1
      if abs_error then
         epsilon = abs_error
      else
         epsilon = rel_error * denom
      end
      if true_residual and abs_error then
         efactor = A:error(x,b) / denom
      end
      efactor = efactor * efactor
      epsilon = epsilon * epsilon
      local iter = 0
      local r = A:residue(x,b)
      local rx = r
      local p = r
      local rho = A:dot(r,r)
      local eta = A:dot(r,rx)
      while iter <= max_iter do
         iter = iter + 1
         if logging then
            norms[#norms + 1] = rho
         end
         local Ap = A:apply(p)
         local Aprx = A:dot(Ap,rx)
         if math.abs(Aprx) <= zero_guard then
            status.Syndrome = "<Ap|rx> too small"
            break
         end
         local alpha = eta / Aprx
         local s = A:axpy(-alpha, Ap, r)
         local As = A:apply(s)
         local AsAs = A:dot(As,As)
         if AsAs <= zero_guard then
            status.Syndrome = "<As|As> too small"
            break
         end
         local omega = A:dot(As,s) / AsAs
         x = A:axpy(omega, s, A:axpy(alpha, p, x))
         r = A:axpy(-omega, As, s)
         rho = A:dot(r,r)
         if (iter >= min_iter) and (rho < epsilon * efactor) then
            if true_residual then
               local error = A:error(x,b)
               if error * error < epsilon then
                  status.Status = "OK"
                  status.Syndrome = "true residual converged"
                  break
               end
               efactor = error / denom
               efactor = efactor * efactor
            else
               status.Status = "OK"
               status.Syndrome = "iterative residual converged"
               break
            end
         end
         if math.abs(eta) <= zero_guard then
            status.Syndrome = "eta too small"
            break
         end
         if math.abs(omega) <= zero_guard then
            status.Syndrome = "omega too small"
            break
         end
         if convergence_factor and (iter >= min_iter) then
            local observed_rate = math.expt(rho/denom, 1.0/(2 * iter))
            if observed_rate > convergence_factor then
               status.Syndrome = "convergence too slow (CF trigger)"
               break
            end
         end
         local new_eta = A:dot(r,rx)
         local beta = new_eta / eta * alpha / omega
         eta = new_eta
         p = A:axpy(beta, A:axpy(-omega, Ap, p), r)
      end
      if iter > max_iter then
         status.Syndrome = "Max iteraction reached"
      end
      status.Norms = norms
      status.Iterations = iter
      status.RHSNorm = b_norm
      status.SolutionNorm = A:norm(x)
      status.AbsoluteResidual = A:error(x,b)
      if b_norm == 0 then
         status.RelativeResidual = status.AbsoluteResidual / x_norm
      else
         status.RelativeResidual = status.AbsoluteResidual / b_norm
      end
      return x, status
   end
   
   function solver:setup(A)
      local sx = {}
      function sx:solve(b,B,x0)
         return solve(b,B,x0)
      end
      return sx
   end
   
   return solver
end
