do
  --Solver parameters
  local eps_i = 5e-6
  local eps_f = 5e-5
  local moebius_eps = 1.5e-8
  local m1_eps = 1.5e-8
  local dirac_max_iter = 50000
  local eps_1 = 1e-10

  -- Domain wall parameters
  local L5_f    = 32
  local M5    = 1.8
  mq_l  = 0.001
  quark_bc = { 1, 1, 1, -1 }


  -- Moebius parameters
  local L5_c    = 12
  local M_alpha = 2.66
  local M_b5    = (1+M_alpha)/2
  local M_c5    = M_b5-1    -- a5=1
  local iterations = 3


  local function project_p(src_d5, L5)
    local p_src_d5 = {}
    for s = 0, L5-1 do p_src_d5[1+s] = L:DiracFermion() end
    for s = 0, L5-2 do
      p_src_d5[1+s]=0.5*((1-gamma{n=15})*src_d5[1+s]+(1+gamma{n=15})*src_d5[2+s])
    end
    p_src_d5[L5]=0.5*((1-gamma{n=15})*src_d5[L5]+(1+gamma{n=15})*src_d5[1])
    return p_src_d5
  end

  local function project_m(src_d5, L5)
    local p_src_d5 = {}
    for s = 0, L5-1 do p_src_d5[1+s] = L:DiracFermion() end
    p_src_d5[1]=0.5*((1+gamma{n=15})*src_d5[L5]+(1-gamma{n=15})*src_d5[1])
    for s = 1, L5-1 do
      p_src_d5[1+s]=0.5*((1+gamma{n=15})*src_d5[s]+(1-gamma{n=15})*src_d5[1+s])
    end
    return p_src_d5
  end

  local function extract_first_component(src_d5)
    local src_d4 = {}
    src_d4 = L:DiracFermion()
    src_d4 = src_d5[1]
    return src_d4
  end

  local function add_zeros_in_5d(src_d4, L5)
    local src_d5 = {}
    for s = 0, L5-1 do src_d5[1+s] = L:DiracFermion() end
    src_d5[1] = src_d4
    return src_d5
  end

  local function convert_fermion_D4_to_D5(src_d4, L5)
    local src_d5 = {}
    for s = 0, L5-1 do src_d5[1+s] = L:DiracFermion() end
    -- includes reversal of 5th dimension
    src_d5[1] = 0.5 * (1 + gamma{n=15}) * src_d4
    src_d5[L5]= 0.5 * (1 - gamma{n=15}) * src_d4
    return src_d5
  end

  local function convert_fermion_D5_to_D4(prop_d5, L5)
    return 0.5 * ((1 - gamma{n=15}) * prop_d5[1] +
	          (1 + gamma{n=15}) * prop_d5[L5])
  end

  local function mdwf_norm2(F)
    local n = 0
    for i = 1, #F do
      n = n + F[i]:norm2()
    end
    return n
  end

  local function mdwf_sub(A,B)
    local X = {}
    for i = 1, #A do
      X[i] = A[i] - B[i]
    end
    return X
  end

  local function mdwf_add(A,B)
    local X = {}
    for i = 1, #A do
      X[i] = A[i] + B[i]
    end
    return X
  end



  function make_solver_MADCG(U)
    -- create solvers
    local DW_f = qcd.MDWF.Shamir(U, quark_bc, L5_f, M5, mq_l, 1.0)
    local solver_i = DW_f:mixed_solver(eps_1, dirac_max_iter,
                                       eps_i, dirac_max_iter)
    local solver_f = DW_f:mixed_solver(eps_1, dirac_max_iter,
                                       eps_f, dirac_max_iter)
    local DW_f_m1 = qcd.MDWF.Shamir(U, quark_bc, L5_f, M5, 1.0, 1.0)
    local solver_m1 = DW_f_m1:mixed_solver(eps_1, dirac_max_iter,
                                           m1_eps, dirac_max_iter)
    local M_b5_s  = {}
    local M_c5_s  = {}
    for i = 1,L5_c do
      table.insert(M_b5_s, M_b5)
      table.insert(M_c5_s, M_c5)
    end
    local DW_c = qcd.MDWF.generic(U, quark_bc, L5_c, M5, mq_l, M_b5_s, M_c5_s)
    local solver_moeb = DW_c:mixed_solver(eps_1, dirac_max_iter,
                                          moebius_eps, dirac_max_iter)
    local DW_c_m1 = qcd.MDWF.generic(U, quark_bc, L5_c, M5, 1.0, M_b5_s, M_c5_s)

    local function solver_5d(rhs, print_residual, p1, p2)
      printf("MADCG solver: L5_f=%d L5_c=%d alpha=%f; Mobius iterations = %d\n", L5_f, L5_c, M_alpha, iterations)
      local madcg_timer = timer("MADCG")
      local norm2_srce = nil
      if print_residual then norm2_srce = mdwf_norm2(rhs) end

      -- initial solve
      local sol = solver_i(rhs, p1, p2)
      do
        local Dx = DW_f:D(sol)
        rhs = mdwf_sub(rhs, Dx)
      end

      if print_residual then
        local norm2_diff = mdwf_norm2(rhs)
        printf("norm2_diff/norm2_srce = %25.15e\n", norm2_diff/norm2_srce)
      end


      -- Mobius solves
      for i = 1, iterations do
        local a = solver_m1(rhs, p1, p2)
        local c = project_m(a, L5_f)
        a = extract_first_component(c)
        a = add_zeros_in_5d(a, L5_c) -- c_moebius
        a = project_p(a, L5_c)
        a = DW_c_m1:D(a) -- b_moebius
        a = solver_moeb(a, p1, p2) -- y_moebius
	a = project_m(a, L5_c)
        a = extract_first_component(a) -- y1
        a = add_zeros_in_5d(a, L5_f)
        c = mdwf_add(c, a) -- (y1,0,...,0)+c
        a = project_p(a, L5_f)
        a = DW_f:D(a)
        a = solver_m1(a, p1, p2)
        a = project_m(a, L5_f)
        a = mdwf_sub(c, a) -- y
        a = project_p(a, L5_f) -- x
        sol = mdwf_add(sol, a)
        a = DW_f:D(a) -- Dx
        rhs = mdwf_sub(rhs, a)
        if print_residual then
          local norm2_diff = mdwf_norm2(rhs)
          printf("norm2_diff/norm2_srce = %25.15e\n", norm2_diff/norm2_srce)
        end
      end

      -- final solve
      do
        local x = solver_f(rhs, p1, p2)
        sol = mdwf_add(sol, x)
        if print_residual then
          x = DW_f:D(x)
          rhs = mdwf_sub(rhs, x)
          local norm2_diff = mdwf_norm2(rhs)
          printf("norm2_diff/norm2_srce = %25.15e\n", norm2_diff/norm2_srce)
        end
      end

      madcg_timer("done")
      return sol
    end

    local function solver_dirferm(rhs, print_residual, p1, p2)
      local x = convert_fermion_D4_to_D5(rhs, L5_f)
      x = solver_5d(x, print_residual, p1, p2)
      return convert_fermion_D5_to_D4(x, L5_f)
    end

    local function solver_dirprop(rhs, print_residual, p1, p2)
      sol = L:DiracPropagator()
      for c = 0, 2 do
        for d = 0, 3 do
          local src = rhs[{c=c,d=d}]
          printf("solving DiracPropagator c = %d, d = %d\n", c, d)
          sol[{c=c,d=d}] = solver_dirferm(src, print_residual, p1, p2)
        end
      end
      return sol
    end

    local cnt = 0
    return function(x, p0, p1, p2)
      local s = tostring(x)
      cnt = cnt + 1
      local inv_timer = timer(string.format("[%d]MADCG dirac_inv(%s)", cnt, s))
      local y = nil
      if string.find(s, "^table") and #x == L5_f then
        y = solver_5d(x, p0, p1, p2)
      elseif string.find(s, "^QDP:DiracFermion") then
        y = solver_dirferm(x, p0, p1, p2)
      elseif string.find(s, "^QDP:DiracPropagator") then
        y = solver_dirprop(x, p0, p1, p2)
      else
        printf("Bad argument to MADCG solver: %s\n", s)
        os.exit(1)
      end
      inv_timer('done')
      return y
    end
  end


  local stdCG_eps_1 = 1e-10
  local stdCG_eps_2 = 9e-18

  function make_solver_stdCG_builtin(U)
    local DW = qcd.MDWF.Shamir(U, quark_bc, L5_f, M5, mq_l, 1.0)
    local solver = DW:mixed_solver(stdCG_eps_1, dirac_max_iter,
                                   stdCG_eps_2, dirac_max_iter)
    local cnt = 0
    return function (x, p1, p2)
      cnt = cnt + 1
      local inv_timer = timer(string.format("[%d]dirac_inv(%s)",
                                            cnt, tostring(x)))
      local y, eps, iters, ac, mp = solver(x, p1, p2)
      inv_timer('done')
      return y, ac, mp
    end
  end

  function make_solver_stdCG(U)
    local DW = qcd.MDWF.Shamir(U, quark_bc, L5_f, M5, mq_l, 1.0)
    local solver = DW:mixed_solver(stdCG_eps_1, dirac_max_iter,
                                   stdCG_eps_2, dirac_max_iter)

    local function solver_5d(rhs, print_residual, p1, p2)
      local x = solver(rhs, p1, p2)
      if print_residual then
        local norm2_srce = mdwf_norm2(rhs)
        local Dx = DW:D(x)
        local y = mdwf_sub(rhs, Dx)
        local norm2_diff = mdwf_norm2(y)
        printf("norm2_diff/norm2_srce = %25.15e\n", norm2_diff/norm2_srce)
      end
      return x
    end

    local function solver_dirferm(rhs, print_residual, p1, p2)
      local x = convert_fermion_D4_to_D5(rhs, L5_f)
      x = solver_5d(x, print_residual, p1, p2)
      return convert_fermion_D5_to_D4(x, L5_f)
    end

    local function solver_dirprop(rhs, print_residual, p1, p2)
      sol = L:DiracPropagator()
      for c = 0, 2 do
        for d = 0, 3 do
          local src = rhs[{c=c,d=d}]
          printf("solving DiracPropagator c = %d, d = %d\n", c, d)
          sol[{c=c,d=d}] = solver_dirferm(src, print_residual, p1, p2)
        end
      end
      return sol
    end


    local cnt = 0
    return function(x, p0, p1, p2)
      local s = tostring(x)
      cnt = cnt + 1
      local inv_timer = timer(string.format("[%d]stdCG dirac_inv(%s)", cnt, s))
      local y = nil
      if string.find(s, "^table") and #x == L5_f then
        y = solver_5d(x, p0, p1, p2)
      elseif string.find(s, "^QDP:DiracFermion") then
        y = solver_dirferm(x, p0, p1, p2)
      elseif string.find(s, "^QDP:DiracPropagator") then
        y = solver_dirprop(x, p0, p1, p2)
      else
        printf("Bad argument to stdCG solver: %s\n", s)
        os.exit(1)
      end
      inv_timer('done')
      return y
    end
  end
end
