-- IMPLEMENTATION OF FUNCTIONS ACTING ON ARRAYS
-- such as 
-- * 5D FERMIONS
-- 
-- TODO 
-- * functions like scale, add, etc should be available for any reasonable arrays 
--   (vectors, matrices, etc)

require "gauge"
-----------------------------------------------------------------------------
-- random fields
-----------------------------------------------------------------------------

function make_random_SUn_gauge(S)
  local gauge_u = {}
  for mu = 0, #L-1 do
    gauge_u[1+mu] = toSUn(S:gaussian_ColorMatrix())
  end
  return gauge_u
end
function make_random_dirprop_5d(S, L5)
  local dp5 = {}
  for i = 1, L5 do
    dp5[i] = S:gaussian_DiracPropagator()
  end
  return dp5
end
function make_random_dirferm_5d(S, L5)
  local df5 = {}
  for i = 1, L5 do
    df5[i] = S:gaussian_DiracFermion()
  end
  return df5
end

-- another function to create a 5d fermion: this time, normalized
function dw_random_latdirferm(L5, rnd)
  local n = 0.
  local res = {}
  for i = 0, L5 - 1 do
    res[1+i] = rnd:gaussian_DiracFermion()
    n = n + res[1+i]:norm2()
  end
  n = math.sqrt(n)
  for i = 0, L5 - 1 do
    res[1+i] = res[1+i] / n
  end
  return res
end


-- create a (scaled) copy of anything except string, lattice, ???
function scal_nontable_(v, scal)
  assert('table' ~= type(v))
  if (   'nil'      == type(v)
      or 'string'   == type(v) 
      or 'lattice'  == type(v)) then 
    if (nil ~= scal) then
      error(string.format("cannot scale %s", type(v)))
    end
    return v 
  end
  scal = (scal or 1)
  if     'lattice.int'             == type(v) then return scal * (v.lattice):Int(v)
  elseif 'lattice.real'            == type(v) then return scal * (v.lattice):Real(v) 
  elseif 'lattice.complex'         == type(v) then return scal * (v.lattice):Complex(v)
  elseif 'lattice.color.vector'    == type(v) then return scal * (v.lattice):ColorVector(v) 
  elseif 'lattice.color.matrix'    == type(v) then return scal * (v.lattice):ColorMatrix(v)
  elseif 'lattice.dirac.fermion'   == type(v) then return scal * (v.lattice):DiracFermion(v) 
  elseif 'lattice.dirac.propagator'== type(v) then return scal * (v.lattice):DiracPropagator(v)
  elseif('number'                  == type(v) 
      or 'complex'                 == type(v))then return scal * v
  else
    error(string.format("%s : unsupported type", type(v)))
    return nil
  end
end

-- create deep copy of a latvec (of lattice oblects, numbers, etc)
-- TODO clarify semantics wrt deep-copying of keys; are keys assumed immutable?
function latvec_copy(obj, scal, seen, scal_nontable_func)
  if 'table' == type(obj) then
    -- shamelessly copied from stackoverflow 
    -- [https://stackoverflow.com/questions/640642/how-do-you-copy-a-lua-table-by-value]
    if seen and seen[obj] then return seen[obj] end
    local s = seen or {}
    local obj_mt = getmetatable(obj)
    local res = {}
    setmetatable(res, obj_mt)
    s[obj] = res
    for k, v in pairs(obj) do 
      res[latvec_copy(k, nil, s)] = latvec_copy(v, scal, s, scal_nontable_func)
    end
    return res
  end
  return (scal_nontable_func or scal_nontable_)(obj, scal)
end

function latvec_fromfunction(dim, func, arg)
  -- TODO implement multi-dim
  if 'table' == type(dim) then
    if 0 == #dim then return {}
    elseif 1 == #dim then dim = dim[1]  -- continue below
    else 
      local newdim, res = {}, {}
      for s = 1, #dim - 1 do newdim[s] = dim[s+1] end
      for i = 1, dim[1] do
        res[i] = latvec_fromfunction(newdim, func, arg)
      end
      return res
    end
  end
  if ('number' ~= type(dim) or 0 ~= dim%1) then
    error("dim must be an integer")
  end
  local res = {}
  for i = 1, dim do res[i] = func(i, arg) end
  return res
end

function latvec_const(dim, a)
  return latvec_fromfunction(dim, function() return latvec_copy(a) end)
end
function make_list_const(a, len)
  printf("make_list_const(a, len): OBSOLETE; use latvec_const(len, a)\n")
  return latvec_const(len, a)
end

function latvec_asarray1d(x, x_len)
  -- if table, check length
  -- if not a table, make a constant table
  -- NOTE x's are not deep-copied, so changing one element of the result 
  -- may have side effects; TODO make a deep copy version ; depends on having 
  -- a function implementing universal deep copy
  if 'table' == type(x) then
    if x_len and #x ~= x_len then
      error(string.format("latvec size mismatch: len(%s) != %d", tostring(x), x_len))
    end
    return x
  elseif x then 
    local x_s   = {}
    for s = 1, x_len do  x_s[s] = x  end
    return x_s
  else
    return {}
  end
end
latvec_as_table = latvec_asarray1d

function latvec_zeros_like(v)
  return latvec_copy(v, 0)
end
-- generalize standard ops to tables, in which ops are applied to items
function latvec_norm2(v)
  if 'table' == type(v) then
    local nr2 = 0.
    for i = 0, #v-1 do 
      nr2 = nr2 + latvec_norm2(v[1+i])
    end
    return nr2
  else
    return v:norm2()
  end
end
function conj_nontable_(v)
  assert('table' ~= type(v))
  if 'number' == type(v) then return v
  else return v:conj()
  end
end
function latvec_conj(v)
  if 'table' == type(v) then
    local c = {}
    for i = 0, #v-1 do
      c[1+i] = latvec_conj(v[1+i])
    end
    return c
  else return conj_nontable_(v) end
end
function latvec_shift(v, mu, dir)
  if 'table' == type(v) then
    local res = {}
    for i = 0, #v-1 do
      res[1+i] = latvec_shift(v[1+i], mu, dir)
    end
    return res
  else return v:shift(mu, dir) end
end
function latvec_add(a, b)
  if 'table' == type(a) then
    assert ('table' == type(b))
    assert (#a == #b)
    local c = {}
    for i = 0, #a-1 do
      c[1+i] = latvec_add(a[1+i], b[1+i])
    end
    return c
  else return (a + b) end
end
function latvec_sum(...)
  local ll  = {...}
  local n   = #ll
  if n <= 0 then return {} end
  local c = ll[1]
  for i = 2, n do
    c = latvec_add(c, ll[i])
  end
  return c
end
function latvec_sub(a, b)
  if 'table' == type(a) then
    assert ('table' == type(b))
    assert (#a == #b)
    local c = {}
    for i = 0, #a-1 do
      c[1+i] = latvec_sub(a[1+i], b[1+i])
    end
    return c
  else return (a - b) end
end
function latvec_scal_right(a, sc)    -- return a*sc
  if 'table' == type(a) then
    local c = {}
    for i = 0, #a-1 do
      c[1+i] = latvec_scal_right(a[1+i], sc)
    end
    return c
  else return (a * sc) end
end
function latvec_scal_left(sc, a)     -- return sc*a
  if 'table' == type(a) then
    local c = {}
    for i = 0, #a-1 do
      c[1+i] = latvec_scal_left(sc, a[1+i])
    end
    return c
  else return (sc * a) end
end
function latvec_axpy(a, x, y)     -- return a*x + y
  if 'table' == type(x) then
    assert ('table' == type(y))
    assert (#x == #y)
    local c = {}
    for i = 0, #x-1 do
      c[1+i] = latvec_axpy(a, x[1+i], y[1+i])
    end
    return c
  else return (a*x + y) end
end
function latvec_scalsum_left(...) -- (a0,x0,a1,x1,...) -> a0*x0+a1*x1+... 
  local ll = {...}
  assert (0 == #ll % 2)
  if #ll <= 0 then return 0 end
  local res = latvec_scal_left(ll[1], ll[2])
  for i = 1, #ll / 2 - 1 do
    res = latvec_axpy(ll[1+2*i], ll[2+2*i], res)
  end
  return res
end
function latvec_locvdot(x, y)
  -- compute local scalar product x^H.y (return complex field)
  if 'table' == type(x) then
    assert ('table' == type(y))
    assert (#x == #y)
    local d = {}
    for i = 0, #x-1 do
      d[1+i] = latvec_locvdot(x[1+i], y[1+i])
    end
    return d
  else return qcd.dot(x, y) end
end
function latvec_real(x)
  if 'table' == type(x) then
    local d = {}
    for i = 0, #x-1 do
      d[1+i] = latvec_real(x[1+i])
    end
    return d
  else return latvec_real(x) end
end
function latvec_imag(x)
  if 'table' == type(x) then
    local d = {}
    for i = 0, #x-1 do
      d[1+i] = latvec_imag(x[1+i])
    end
    return d
  else return latvec_imag(x) end
end
function latvec_locnorm2(x)
  return latvec_real(latvec_locvdot(x, x))
end
function latvec_vdot(x, y) 
  -- scalar product (return complex global)
  if 'table' == type(x) then
    assert ('table' == type(y))
    assert (#x == #y)
    local d = 0.
    for i = 0, #x-1 do
      d = d + latvec_vdot(x[1+i], y[1+i])
    end
    return d
  else return qcd.dot(x, y):sum() end
end
function latvec_ortho(x, y_b) -- return ||x - (y_b . x)*y_b||
  local d = latvec_vdot(y_b, x) / latvec_norm2(y_b)
  local x1= latvec_axpy(-d, y_b, x)
  return latvec_scal_left(math.sqrt(1. / latvec_norm2(x1)), x1)
end

-- set functions
function latvec_setzero(a)
  if 'table' == type(a) then
    for i = 0, #a - 1 do
      latvec_setzero(a[1+i])
    end
  else a:set(0. * a) end
end
function latvec_set(a, b)   -- set a <- b
  if 'table' == type(a) then
    assert ('table' == type(b))
    assert (#a == #b)
    for i = 0, #a - 1 do
      latvec_set(a[1+i], b[1+i])
    end
  else a:set(b) end
end

-- cmp functions
-- TODO support  one argument to be a global number
-- TODO (some distant day) cmp of broadcastable nested arrays (similar to NumPy)
function latvec_eq(a, b)
  if 'table' == type(a) then
    assert ('table' == type(b))
    assert (#a == #b)
    local c = {}
    for i = 0, #a-1 do
      c[1+i] = latvec_eq(a[1+i], b[1+i])
    end
    return c
  else return qcd.eq(a, b) end
end
function latvec_ne(a, b)
  if 'table' == type(a) then
    assert ('table' == type(b))
    assert (#a == #b)
    local c = {}
    for i = 0, #a-1 do
      c[1+i] = latvec_ne(a[1+i], b[1+i])
    end
    return c
  else 
    printf("qcd.ne(%s, %s)\n", tostring(a), tostring(b))
    return qcd.ne(a, b) 
  end
end
function mask_all(a)
  return 0 == qcd.eq(a, 0):sum()
end
function mask_any(a)
  return 0 ~= qcd.ne(a, 0):sum()
end
function latvec_all(a)
  -- compute "and" function over a (nested) array of Int(0->false, 1->true)
  if 'table' == type(a) then
    local c = true
    for i = 0, #a-1 do
      c = c and latvec_all(a[1+i])
    end
    return c
  else return mask_all(a) end
end
function latvec_any(a)
  -- compute "and" function over a (nested) array of Int(0->false, 1->true)
  if 'table' == type(a) then
    local c = false
    for i = 0, #a-1 do
      -- hopefully summation does not overflow the int type
      c = c or latvec_any(a[1+i])
    end
    return c
  else return mask_any(a) end
end
function field_close(x, y, rtol, atol)
  if nil == rtol then rtol = 1e-5 end
  if nil == atol then atol = 1e-8 end
  local x2py2 = (qcd.dot(x,x) + qcd.dot(y,y)):real()
  local xmy = x - y
  local xmy2= qcd.dot(xmy, xmy):real()
  local aclose = qcd.le(xmy2, atol*atol)
  local rclose = qcd.le(xmy2, rtol*rtol*x2py2)
  return qcd.ne(aclose * rclose, 0) -- aclose and rclose
end
function field_allclose(x, y, rtol, atol)
  return mask_all(field_close(x, y, rtol, atol))
end

function latvec_close(x, y, rtol, atol)
  -- return latvec_mask
  if 'table' == type(x) then
    assert ('table' == type(y))
    assert (#x == #y)
    local d = {}
    for i = 0, #x-1 do
      d[1+i] = latvec_close(x[1+i], y[1+i], rtol, atol)
    end
    return d
  else return field_close(x, y, rtol, atol) end
end
function latvec_allclose(x, y, rtol, atol)
  -- return global bool
  return latvec_all(latvec_close(x, y, rtol, atol))
end

--    ss            subset with meaningful information
--    ss_v1, ss_v2  precond. vectors defined only on subsets
--    res[ss] <- ss_v1, res[not ss] <- ss_v2

eopc_shift2nd_mu = 0      -- TODO make external param?
function latvec_eopc_pair_to_single(ss, ss_v1, ss_v2)
  local res = latvec_shift(ss_v2, eopc_shift2nd_mu, "from_backward")
  ss:where(latvec_set, res, ss_v1)
  return res
end
function latvec_eopc_single_to_pair(ss, v12)
  local ss_v1 = latvec_copy(v12, 0.)
  ss:where(latvec_set, ss_v1, v12)
  local ss_v2 = latvec_copy(v12, 0.)
  local v12_sh = latvec_shift(v12, eopc_shift2nd_mu, "from_forward")
  ss:where(latvec_set, ss_v2, v12_sh)
  return ss_v1, ss_v2
end
function print_latvec_eo_norm2(v, title)      -- for debug
  if nil == title then title = "#" end
  printf("norm2(%s)=%e = %e[even] + %e[odd]\n", 
         title, latvec_norm2(v),
         L:Subset("even"):where(latvec_norm2, v),
         L:Subset( "odd"):where(latvec_norm2, v))
end



function latvec_cosangle(a, b)
  local a2 = latvec_norm2(a)
  local b2 = latvec_norm2(b)
  if a2 <= 0. or b2 <= 0. then return nil end
  return latvec_vdot(a, b) / math.sqrt(a2 * b2)
end
function latvec_cosangle_abs(a, b)
  local ca = latvec_cosangle(a,b)
  if nil == ca then return nil end
  if type(ca) == 'number' then return math.abs(ca)
  else return ca:abs() end
end
function latvec_cosangle_arg(a, b)
  local ca = latvec_cosangle(a,b)
  if nil == ca then return nil end
  if type(ca) == 'number' then 
    if ca < 0 then return math.pi
    else return 0. end
  else return math.atan2(ca:imag(), ca:real()) end
end
function latvec_cosangle_cosarg(a, b)
  local ca = latvec_cosangle(a,b)
  if nil == ca then return nil end
  return ca:real() / ca:abs()
end
function latvec_cosangle_sinarg(a, b)
  local ca = latvec_cosangle(a, b)
  if nil == ca then return nil end
  return ca:imag() / ca:abs()
end
function latvec_rdiff(a,b) -- compute 2*|a - b| / (|a| + |b|)
  local a_n2 = latvec_norm2(a)
  local b_n2 = latvec_norm2(b)
  local amb  = latvec_norm2(latvec_axpy(-1., a, b))
  if 0. == a_n2 and 0. == b_n2 then return 0.
  else return 2.*amb / (a_n2 + b_n2) end
end

function latvec_scan(a,b)
   local function scan_4d(u,v,uv,p)
      local x,y,t,z;
      local lat = u.lattice;
      local uu = qcd.dot(u,u);
      local vv = qcd.dot(v,v);
      local dd = qcd.dot(uv,uv);
      for x = 0, lat[0] - 1 do
         for y = 0, lat[1] - 1 do
            for z = 0, lat[2] - 1 do
               for t = 0, lat[3] - 1 do
                  local q = 2 * dd[{x,y,z,t}] / (uu[{x,y,z,t}] + vv[{x,y,z,t}]);
                  if (q:abs() > 1e-7) then
                     printf("  diff[%s %d, %d, %d, %d] = (%18.10e, %18.10e)\n", p, x, y, z, t, q:real(), q:imag());
                  end
               end
            end
         end
      end
   end
   local ab = latvec_axpy(-1.,a,b)
   if type(a) == 'table' then
      local s;
      for s = 0, #a - 1 do
         scan_4d(a[s+1],b[s+1],ab[s+1], string.format(" %d,", s));
      end
   else
      scan_4d(a,b,ab,"");
   end
end
  
function print_latvec_cmp(a, b, title)
  local ca = latvec_cosangle(a, b)
  if nil == ca then 
    printf('print_latvec_cmp: %s: nil\n', title)
  else
     local delta = latvec_rdiff(a,b);
    printf('print_latvec_cmp: %40s: |a/b|=%19.10e  a^b=polar(%19.10e, %19.10f) delta=%14.14f\n',
           tostring(title), math.sqrt(latvec_norm2(a) / latvec_norm2(b)), 
           latvec_cosangle_abs(a, b),
           latvec_cosangle_arg(a, b),
           delta)
--    if delta > 1e-12 then
--       latvec_scan(a,b);
--    end
  end
end


-- operator definitions
-- site-hopping part of the Wilson operator (mind the sign)
--    d       fermion
--    u       gauge field
function latvec_op_xwilson(d, u, is_dag)
  local res
  if 'table' == type(d) then
    res = {}
    for s = 0, #d - 1 do
      res[1+s] = latvec_op_xwilson(d[1+s], u, is_dag)
    end
  else
    res = nil
    for mu=0, #L - 1 do
      local y 
      if is_dag 
      then y = (  .5*(1. + gamma{mu=mu}) * (u[1+mu] * d:shift(mu, "from_forward"))
                + .5*(1. - gamma{mu=mu}) * (u[1+mu]:adjoin() * d):shift(mu, "from_backward"))
      else y = (  .5*(1. - gamma{mu=mu}) * (u[1+mu] * d:shift(mu, "from_forward"))
                + .5*(1. + gamma{mu=mu}) * (u[1+mu]:adjoin() * d):shift(mu, "from_backward"))
      end
      if nil == res then res = y else res = res + y end
    end
  end
  return res
end
-- flavor-hopping part of the domain wall operator
--    d     5d fermion = table{DiracFermion,...}
--    mf    chiral fermion mass
--    dag   if not nil, apply 
function latvec_op_x5(d, mf, is_dag)
  assert('table' == type(d))
  local res = {}
  if is_dag then
    res[1] = .5*(1 + gamma{mu=5}) * d[2]  - mf * .5*(1 - gamma{mu=5}) * d[#d]
    for s = 1, #d - 2 do
      res[1+s] = .5*(1 + gamma{mu=5}) * d[2+s] + .5*(1 - gamma{mu=5}) * d[s]
    end
    res[#d] = -mf * .5*(1 + gamma{mu=5}) * d[1]  + .5*(1 - gamma{mu=5}) * d[#d-1]
  else
    res[1] = .5*(1 - gamma{mu=5}) * d[2]  - mf * .5*(1 + gamma{mu=5}) * d[#d]
    for s = 1, #d - 2 do
      res[1+s] = .5*(1 - gamma{mu=5}) * d[2+s] + .5*(1 + gamma{mu=5}) * d[s]
    end
    res[#d] = -mf * .5*(1 - gamma{mu=5}) * d[1]  + .5*(1 + gamma{mu=5}) * d[#d-1]
  end
  return res
end

-- Wilson Dslash 
-- XXX check conventions for the Mw sign; 
-- XXX agree up to a factor with qcd.Clover(..):D (== 2*kappa*latvec_op_wilson, 2*kappa=1/(4+Mw) )
function latvec_op_wilson(d, u, Mw, is_dag)
  return latvec_scalsum_left(
            4. + Mw,  d,
            -1.,      latvec_op_xwilson(d, u, is_dag))
end

-- DWF Dslash 
--- XXX M5 sign conventions: Qlua(here and qcd.MDWF) == CPS != MDWF lib
--    d     5d fermion = table{DiracFermion,...}
--    u       gauge field
function latvec_op_dslash_dwf(d, u, M5, mf, is_dag)
  return latvec_scalsum_left(
            5 - M5,   d,
            -1.,      latvec_op_xwilson(d, u, is_dag),
            -1.,      latvec_op_x5(d, mf, is_dag))
end

-- Moebius Dslash
--- XXX M5 sign conventions: Qlua(here and qcd.MDWF) == CPS != MDWF lib
--    d     5d fermion = table{DiracFermion,...}
--    u       gauge field
function latvec_op_dslash_moebius(d, u, M5, mf, b5_s, c5_s, is_dag)
  local L5 = #d
  if is_dag then
    local y1 = {}
    local y2 = {}
    for t = 0, L5 - 1 do
      local b5, c5
      if 'table' == type(b5_s) then b5 = b5_s[1+t] else b5 = b5_s end
      if 'table' == type(c5_s) then c5 = c5_s[1+t] else c5 = c5_s end
      if 'complex' == type(b5) then b5 = b5:conj() end
      if 'complex' == type(c5) then c5 = c5:conj() end
      local xw_d = latvec_op_xwilson(d[1+t], u, is_dag)
      y1[1+t] = (b5 * (4 - M5) + 1) * d[1+t] - b5 * xw_d
      y2[1+t] = (c5 * (4 - M5) - 1) * d[1+t] - c5 * xw_d
    end
    return latvec_scalsum_left(
              1., y1, 
              1., latvec_op_x5(y2, mf, is_dag))
  else
    local x5_d = latvec_op_x5(d, mf, is_dag)
    local res = {}
    for s = 0, L5 - 1 do
      local b5, c5
      if 'table' == type(b5_s) then b5 = b5_s[1+s] else b5 = b5_s end
      if 'table' == type(c5_s) then c5 = c5_s[1+s] else c5 = c5_s end
        local xw_bpcx5_d = latvec_op_xwilson(b5 * d[1+s] + c5 * x5_d[1+s], u, is_dag)
        res[1+s] = ((b5 * (4 - M5) + 1.) * d[1+s] 
                  + (c5 * (4 - M5) - 1.) * x5_d[1+s] 
                  - xw_bpcx5_d)
    end
    return res
  end
end

require "dwf" -- definitions for DWF
