require "stdlib"

function tfmt(x)
   local r = "{"
   local s = ""
   for i,v in pairs(x) do
      r = r .. s .. tostring(v)
      s = ","
   end
   return r .. "}"
end

function foreach(t,fn, zz)
   local r = #t
   local p = {}
   local z = zz
   local function scan(k)
      if k == r then
         z = fn(z, p)
      else
         local kk = k + 1
         for i = 0, t[kk] - 1 do
            p[kk] = i
            scan(kk)
         end
      end
   end
   scan(0)
   return z
end

function check_add_int(d,s)
   function mk_random(L, s_seed)
      local v = L:Int(0)
      for i = 0, #L-1 do
         v = v * L[i] + L:pcoord(i)
      end
      return L:RandomState(s_seed, v)
   end
   printf("test int %s <- %s ...", tfmt(d), tfmt(s))
   local srcL = qcd.lattice(s)
   local dstL = qcd.lattice(d)
   local dRnd = mk_random(dstL, 34571345)
   local sRnd = mk_random(srcL, 23456522)
   local Ix = {}
   for i = 1, #d do
      Ix[i] = (sRnd:random_Real() * d[i]):floor():round()
   end
   local gather = qcd.gather(dstL, srcL, Ix)
   local vS = (sRnd:random_Real() * 100000):round()
   local vD = gather:add(vS)
   local vX = dstL:Int(0)
   foreach(s,
           function(z, sp)
              local dp = {}
              for i = 1, #d do
                 dp[i] = Ix[i][sp]
              end
              vX[dp] = vX[dp] + vS[sp]
           end,
           true)
   local status = foreach(d,
                          function(z, dp)
                             local wD = vD[dp]
                             local wX = vX[dp]
                             if wD == wX then
                                return z
                             else
                                if z then
                                   printf("\n")
                                end
                                printf("  check: %s failed: %d != %d\n", tfmt(dp), wD, wX)
                                return false
                             end
                          end,
                          true)
   if status == true then
      printf("          ... ok\n")
   else
      printf("          ... FAILED\n")
   end
end

check_add_int({2,3,4}, {6,5})
check_add_int({6,5}, {4,3,5,6})
check_add_int({12}, {23})
check_add_int({6,7,5,3}, {2,3,8})
check_add_int({4,4,4}, {6,6,6})
check_add_int({4,4,4}, {4,4,4})
check_add_int({4,4,4}, {4,4})
check_add_int({4,4}, {4,4})
check_add_int({4,2}, {4,2})

