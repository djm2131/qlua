-- reference implementation of eigCG
--  same Gauge field as in eigcg-medium.qlua XXXX not yet
require "stdlib"
require "gauge"
require "hex-smear"

Lx = 6
Lt = 12
L           = qcd.lattice{Lx, Lx, Lx, Lt}
seed        = 1984
m_q         = -1.1
c_sw        = 1.0
run_count   = 100
eps1        = 1e-6
eps         = 1e-15
max_cg      = 50000
df_umax     =  60  -- size of deflation subspace (60 is good)
df_vmax     = 150  -- size of Lancoz subspace (150 is good)
df_ksize    =  50  -- fat restart dimension (30 is good)
df_psize    =  20 -- deflation subspace extension size (10 is good)

--          unsmeared     hex2
-- m_q        iters       iters
--  0.5          37          56
--  0.1          44          76
--  0.0          47          84
-- -0.5          67         177
-- -1.0         126        2729
-- -1.1                    7616                        
-- -1.5         757       38586   
-- -1.6        2772
-- -1.65      11839
-- -1.7       18065 

-- get a unique number of each lattice site
function rnd_init(x)
  local l_s = 1
  l_id = L:Int(0)
  for d = 0, #L - 1 do
    l_id = l_id + l_s * L:pcoord(d)
    l_s = l_s * L[d]
  end
  return L:RandomState(x, l_id)
end

S = rnd_init(seed)

U = {}
for i = 1, #L do
   U[i] = toSUn(S:gaussian_ColorMatrix() * 10.4)
end

U = bmw_hex(U, 2)

CL = qcd.Clover(U, 1/(8 + 2 * m_q), c_sw, {1, 1, 1, -1})
-- random eigenvalues from min_lambda to 1 with L[0] small values

-- the operator
function op(z)
   return CL:Dx(CL:D(z))
end

-- random field
function rnd_v(S)
   local F = S:gaussian_DiracFermion()
   return F / math.sqrt(F:norm2())
end

function zero_v()
   return L:DiracFermion()
end

-- standard solver
function std_CG(op, max_k, eps, chi, ident, rs, k0)
   local psi, rho, r = zero_v(), chi, chi:norm2()
   local pi = rho
   local k = 0
   while (r > eps) and (k < max_k) do
      printf("cg %s %5d %15.7e\n", ident, k + k0, r * rs)
      local zeta = op(pi)
      local a = r / qcd.dot(pi, zeta):real():sum()
      --- check if <pi|zeta> is too small, it means a zeto mode is hit
      rho = rho - a * zeta
      local g = rho:norm2()
      local b = g / r
      r = g
      psi = psi + a * pi
      pi = rho + b * pi
      k = k + 1
   end
   printf("cg %s %5d %15.7e (end)\n", ident, k + k0, r * rs)
   return psi, r, k
end

-- mixed solver
function mixed_CG(op, max_k, eps1, eps, chi, ident)
   local psi = zero_v()
   local k_used = 0
   local j = 0
   local chi_x = chi - op(psi)
   local n_x = chi_x:norm2()
   while (n_x > eps) and (k_used < max_k) do
      local s = math.sqrt(n_x)
      local e_x = eps / n_x
      local e_z = eps1
      if e_z < e_x then
         e_z = e_x
      end
      local delta, r, k = std_CG(op, max_k - k_used, e_z, chi_x / s,
                                 string.format("%s %d", ident, j),
                                 n_x, k_used)
      psi = psi + delta * s
      k_used = k_used + k
      chi_x = chi - op(psi)
      n_x = chi_x:norm2()
      j = j + 1
   end
   local rho = chi - op(psi)
   return psi, rho:norm2(), k_used
end

-- accelerated solver
function eig_CG(df, op, max_k, eps, chi, ident, rs, k0)
   local psi, rho, r = df:preamble(op, chi)
   local pi = rho
   local k = 0
   local a0 = nil
   local b0 = nil
   while (r > eps) and (k < max_k) do
      printf("eig-cg %s %5d %15.7e\n", ident, k + k0, r * rs)
      local zeta = op(pi)
      local a = r / qcd.dot(pi, zeta):real():sum()
      --- check if <pi|zeta> is too small, it means a zeto mode is hit
      rho = rho - a * zeta
      local g = rho:norm2()
      local b = g / r
      r = g
      df:update(rho, r, a, b, a0, b0)
      psi = psi + a * pi
      pi = rho + b * pi
      k = k + 1
      a0 = a
      b0 = b
   end
   printf("eig-cg %s %5d %15.7e (end)\n", ident, k + k0, r * rs)
   df:postamble(op)
   return psi, r, k
end

function eig_mixed_CG(df, op, max_k, eps1, eps, chi, ident)
   local psi = zero_v()
   local k_used = 0
   local j = 0
   local chi_x = chi - op(psi)
   local n_x = chi_x:norm2()
   while (n_x > eps) and (k_used < max_k) do
      local s = math.sqrt(n_x)
      local e_x = eps / n_x
      local e_z = eps1
      if e_z < e_x then
         e_z = e_x
      end
      local inner_chi = chi_x / s
      local delta, r, k = eig_CG(df, op, max_k - k_used, e_z, inner_chi,
                                 string.format("%s %d", ident, j),
                                 n_x, k_used)
      psi = psi + delta * s
      k_used = k_used + k
      chi_x = chi - op(psi)
      n_x = chi_x:norm2()
      j = j + 1
   end
   return psi, n_x, k_used
end

-- joining two matrices
function join_YY(Y1, Y2, vmax, ksize)
   local YY = matrix.real{vmax, 2 * ksize} -- filled with zeros
   for e = 0, ksize - 1 do
      for i = 0, vmax - 1 do
         YY[{i,e}] = Y1[{i,e}]
      end
      for i = 0, vmax - 2 do
         YY[{i,e + ksize}] = Y2[{i, e}]
      end
   end
   return YY
end

-- fat Krylov restart
function fat_restart(T, V, vmax, ksize, tx) -- => T', V'
   local Mn, Yn = T:symmetric_eigen()
   local M1, Y1 = T:symmetric_eigen(vmax - 1)
   local Q, R = join_YY(Yn, Y1, vmax, ksize):qr()
   local M, Z = (Q:transpose() * T * Q):symmetric_eigen()
   local QZ = Q * Z
   local T1 = matrix.real{vmax, vmax}
   local V1 = {}
   for k = 0, 2 * ksize - 1 do
      local Vk = QZ[{0,k}] * V[1] -- transposed QZ here!
      for m = 2, vmax do
         Vk = Vk + QZ[{m-1,k}] * V[m]
      end
      V1[k+1] = Vk
      T1[{k,k}] = M[k]
      local q = QZ[{vmax-1,k}] *  tx
      T1[{2 * ksize, k}] = q
      T1[{k, 2 * ksize}] = q
   end
   return T1, V1
end

-- deflator
function mk_deflator(umax, vmax, ksize, psize)
   if (ksize * 2 >= vmax) then
      printf("mk_deflator(): ksize too small\n")
      return nil
   end
   if (psize >= umax) then
      printf("mk_deflator(): psize too small\n")
      return nil
   end
   
   return {
      T = matrix.real{vmax, vmax},
      V = {}, -- Field[vmax]
      vsize = 0,
      H = vector.real(umax),
      U = {}, -- Field[umax]
      usize = 0,
      update_count = 0,
      run_count = 0,
      preamble =
         function(df, op, chi) -- => psi, rho, r
            local psi, rho, r
            if (usize == 0) then
               psi = zero_v()
               rho = chi
            else
               -- aka fv_dot_f
               local Uchi = vector.complex(df.usize)
               for i = 1, df.usize do
                  Uchi[i-1] = qcd.dot(df.U[i], chi):sum()
               end
               psi = zero_v()
               for i = 0, df.usize - 1 do
                  psi = psi + (Uchi[i] / df.H[i]) * df.U[i+1]
               end
               rho = chi - op(psi)
            end
            df.T = matrix.real{vmax, vmax} -- fill with zeros
            r = rho:norm2()
            df.V[1] = rho / math.sqrt(r)
            df.vsize = 0
            return psi, rho, r
         end,
      update =
         function(df, rho, r, a, b, a0, b0)
            df.update_count = df.update_count + 1
            if (df.vsize == 0) then
               df.T[{0,0}] = a
            else
               df.T[{df.vsize,df.vsize}] = 1 / a + b0 / a0
            end
            local tx = - math.sqrt(b) / a
            df.vsize = df.vsize + 1
            if (df.vsize == vmax) then
               local T1, V1 = fat_restart(df.T, df.V, vmax, ksize, tx)
               df.vsize = 2 * ksize
               df.T = T1
               df.V = V1
            else
               df.T[{df.vsize, df.vsize - 1}] = tx
               df.T[{df.vsize - 1, df.vsize}] = tx
            end
            df.V[df.vsize + 1] = rho / math.sqrt(r)
            -- to make output nicer
            io.stdout:flush()
         end,
      postamble =
         function(df, op)
            df.run_count = df.run_count + 1
            if (df.vsize - 1 >= psize) then
               local i
               if (df.usize + psize > umax) then
                  i = umax - psize
               else
                  i = df.usize
               end
               -- recreate the old projected op and its basis
               local Hx = matrix.complex{umax, umax}
               local Ux = {}
               for k = 0, i - 1 do
                  Hx[{k,k}] = df.H[k]
                  Ux[k+1] = df.U[k+1]
               end
               -- new eigenvalues
               local M, Y = df.T:symmetric_eigen(df.vsize - 1)
               for k = 0, psize - 1 do
                  -- rotate Vs
                  local W = Y[{0,k}] * df.V[1]
                  for j = 2, df.vsize - 1 do
                     W = W + Y[{j-1,k}] * df.V[j]
                  end
                  -- orthogonalize to Ux so far
                  for j = 1, i do
                     local z = qcd.dot(Ux[j],W):sum()
                     W = W - z * Ux[j]
                  end
                  W = W / math.sqrt(W:norm2())
                  Ux[i + 1] = W
                  -- compute the operator on W
                  local opW = op(W)
                  for j = 1, i do
                     local z = qcd.dot(Ux[j],opW):sum()
                     Hx[{j - 1, i}] = z:conj()
                     Hx[{i, j - 1}] = z
                  end
                  Hx[{i, i}] = qcd.dot(W,opW):real():sum()
                  i = i + 1
               end
               local M, Y = Hx:hermitian_eigen(i)
               local Uz = {}
               local Hx = vector.real(vmax)
               for k = 1, i do
                  local W = Y[{0,k-1}]:conj() * Ux[1]
                  for j = 2, i do
                     W = W + Y[{j-1,k-1}]:conj() * Ux[j]
                  end
                  Uz[k] = W / math.sqrt(W:norm2())
                  Hx[k-1] = qcd.dot(Uz[k],op(Uz[k])):real():sum()
               end
               df.U = Uz
               df.H = Hx
               df.usize = i
            end
         end,
      info =
         function(df)
            local hh = vector.real(df.usize)
            for i = 0, df.usize - 1 do
               hh[i] = df.H[i]
            end
            return {
               usize = df.usize,
               umax = umax,
               vsize = df.vsize,
               vmax = vmax,
               ksize = ksize,
               psize = psize,
               updates = df.update_count,
               runs = df.run_count,
               eigenvalues = hh
            }
         end
   }
end

function df_show(df, ident)
   local info = df:info()
   printf("DEFLATOR %s\n", ident)
   printf("  %s usize     %6d\n", ident, info.usize)
   printf("  %s umax      %6d\n", ident, info.umax)
   printf("  %s vsize     %6d\n", ident, info.vsize)
   printf("  %s vmax      %6d\n", ident, info.vmax)
   printf("  %s ksize     %6d\n", ident, info.ksize)
   printf("  %s psize     %6d\n", ident, info.psize)
   printf("  %s updates   %6d\n", ident, info.updates)
   printf("  %s runs      %6d\n", ident, info.runs)
   for i = 0, #info.eigenvalues - 1 do
      printf("  %s eigval %4d %15.7e\n", ident, i, info.eigenvalues[i])
   end
   printf("\n")
end

---- eig_CG test
printf("Eig CG test, m_q = %.6f\n\n", m_q)
df = mk_deflator(df_umax, df_vmax, df_ksize, df_psize)
for i = 0, run_count - 1 do
   rhs = rnd_v(S)
   rhs = rhs / math.sqrt(rhs:norm2())
   local ident = string.format("%d", i)
   local psi, r, k = mixed_CG(op, max_cg, eps1, eps, rhs, ident)
   printf("stdCG %3d %5d %15.7e\n", i, k, r)
   io.stdout:flush()
   local psi, r, k = eig_mixed_CG(df, op, max_cg, eps1, eps, rhs, ident)
   printf("EIGCG %3d %5d %15.7e\n", i, k, r)
   df_show(df, ident)
   io.stdout:flush()
end

printf("DONE\n")