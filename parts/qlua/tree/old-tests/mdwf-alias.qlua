require "stdlib"
require "gauge"

-- check definition of Moebius Domain Wall Fermion L3 operator

L = qcd.lattice{4,4,6,8}
M5 = 0.345623
mf = 1.123453
Ls = 10
bc = {complex(5.534123, 2.1234),
      complex(-1.23445, 0.2341),
      complex(7.342511, -3.476),
      complex(0.023452, 2.643)}
b5 = {1.2, 6.2, 9.5, 8.7, 0.9, 1.7, 8.2, 4.9, 2.6, 6.5}
c5 = {2.3, 9.0, 4.7, 0.8, 3.4, 5.7, 0.1, 3.4, 6.7, 5.4}
seed = 45671

do
   local ix = L:Int(0)
   for i = 0, #L - 1 do
      ix = ix * L[i] + L:pcoord(i)
   end
   S = L:RandomState(seed, ix)
end

-- force all U[i] to be aliased to check new QDP expose/reset
U = {}
U[1] = toSUn(4.123 * S:gaussian_ColorMatrix())
for i = 1, #L - 1 do
	U[i+1] = U[1]
end
F = {}
G = {}
for i = 0, Ls - 1 do
   F[i+1] = S:gaussian_DiracFermion()
   G[i+1] = S:gaussian_DiracFermion()
end

function mdwf_norm2(F)
   local n = 0
   for i = 1, #F do
      n = n + F[i]:norm2()
   end
   return n
end

function mdwf_sub(A,B)
   local X = {}
   for i = 1, #A do
      X[i] = A[i] - B[i]
   end
   return X
end

function mdwf_dot(A,B)
   local r = complex(0,0)
   for i = 1, #A do
      r = r + qcd.dot(A[i],B[i]):sum()
   end
   return r
end

------------------------ standard definition ----------------------------------
function Dw(U,F)
   local X = (4 - M5) * F
   for i = 0, #L - 1 do
      local Ui = U[i+1]:copy()
      L:Subset{axis=i,position=L[i]-1}:where(function() Ui:set(bc[i+1]*Ui) end)
      X = X -
         0.5 * ((1-gamma{mu=i})*(Ui*(F:shift(i, "from_forward"))) +
                (1+gamma{mu=i})*((Ui:adjoin() * F):shift(i, "from_backward")))
   end
   return X
end

function Pplus(F)
   return 0.5 * (1+gamma{mu=5}) * F
end

function Pminus(F)
   return 0.5 * (1-gamma{mu=5}) * F
end

function mdwf_std(U,F)
   local G = {}
   G[1] = Dw(U, b5[1] * F[1] + c5[1] * (Pminus(F[2]) - mf*Pplus(F[Ls]))) +
          (F[1] - Pminus(F[2]) + mf * Pplus(F[Ls]))
   for i = 2, Ls - 1 do
      G[i] = Dw(U, b5[i] * F[i] + c5[i] * (Pplus(F[i-1]) + Pminus(F[i+1]))) +
             (F[i] - Pplus(F[i-1]) - Pminus(F[i+1]))
   end
   G[Ls] = Dw(U, b5[Ls] * F[Ls] + c5[Ls] * (Pplus(F[Ls-1])-mf*Pminus(F[1]))) +
           (F[Ls] +mf*Pminus(F[1]) - Pplus(F[Ls-1]))
   return G
end
-------------------------------------------------------------------------------
DW = qcd.MDWF.generic(U, bc, Ls, M5, mf, b5, c5)
printf("DW=%s\n", tostring(DW))
sF = mdwf_std(U, F)
dF = DW:D(F)
printf("dF=%s\n", tostring(dF))

printf("|F|  = %25.15e\n", mdwf_norm2(F))
printf("|sF| = %25.15e\n", mdwf_norm2(sF))
printf("|dF| = %25.15e\n", mdwf_norm2(dF))
printf("|dd| = %25.15e --- must be really small\n", mdwf_norm2(mdwf_sub(sF,dF)))
gDf = mdwf_dot(G, dF)
printf("<G | D F> = %25.15e, %25.15e\n", gDf:real(), gDf:imag())
dG = DW:Dx(G)
Dgf = mdwf_dot(dG, F)
printf("<D*G | F> = %25.15e, %25.15e\n", Dgf:real(), Dgf:imag())
dd = Dgf - gDf
printf("diff      = %25.15e, %25.15e\n", dd:real(), dd:imag())


printf("DONE\n")