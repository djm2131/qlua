require "stdlib"
require "gauge"
-- needs dwf_5d_4d.qlua

-- parameters (completely of the wall, we are checking functionallity now)
-- L = qcd.lattice{6,6,6,12}
L = qcd.lattice{4,4,4,8}
Ls = 10
M5 = 9.345623
mf = 4.123453
a5 = 1.0
bc = {1, 1, 1, 1} -- reference code (dwf_5d_4d.qlua) uses periodic BC in mu=T
seed = 45671

printf("network: %d\n", qcd.network())

-- random generator
do
   local ix = L:Int(0)
   for i = 0, #L - 1 do
      ix = ix * L[i] + L:pcoord(i)
   end
   S = L:RandomState(seed, ix)
end

-- random gauge field
U = {}
for i = 0, #L - 1 do
   U[i+1] = toSUn(14.123 * S:gaussian_ColorMatrix())
   -- U[i+1] = L:ColorMatrix(complex(1.0, 0.0))
end

-- random 4d - source
src4 = S:gaussian_DiracFermion()
-- src4 = src4 / math.sqrt(src4:norm2())

-- inverter
DW = qcd.MDWF.Shamir(U, bc, Ls, M5, mf, a5)
solver = DW:solver(1e-15, 50000)

-- solve in 5d, get (solution, axial_current, m_res)
function ref_solver(rhs4)
   local rhs5 = convert_fermion_D4_to_D5(rhs4, Ls)
   local sol5, eps, iters = solver(rhs5)
   local sol4 = convert_fermion_D5_to_D4(sol5, Ls)
   local ac = {}
   for mu = 0, #L - 1 do
      ac[mu+1] =  calc_corr_conserved_axial_current_pseudoscalar(sol5,
                                                                 Ls, U, mu)
   end
   local mp = calc_corr_midpoint_pseudoscalar(sol5, Ls)

   -- real part of (0,0) at slice Ls/2+1
   -- local mp = sol5[Ls/2+1][{c=0,d=0}]:real()
   

   printf("ref_solver: %s %s %s %s %s\n",
          tostring(sol4),
          tostring(eps),
          tostring(iters),
          tostring(ac),
          tostring(mp))
   return sol4, ac, mp
end

-- solve in 4d get  (solution, axial_current, m_res)
function l3_solver(rhs4)
   local sol4, eps, iters, ac, mp = solver(rhs4)
   
   printf("l3_solver: %s %s %s %s %s\n",
          tostring(sol4),
          tostring(eps),
          tostring(iters),
          tostring(ac),
          tostring(mp))
   return sol4, ac, mp
end


-- compare results
function check_4d(name, a, b)
   local x = a:norm2()
   local y = b:norm2()
   local z = (a-b):norm2()
   printf("relative error in %s: %15.7e\n", name, math.sqrt(2 * z / (x + y)))
end

function dump_4d_r(name, a, b)
   printf("==== start of %s\n", name)
   for x = 0, L[0] - 1 do
      for y = 0, L[1] - 1 do
         for z = 0, L[2] - 1 do
            for t = 0, L[3] - 1 do
               local p = {x, y, z, t}
               local aa = a[p]
               local bb = b[p]
--               printf("%s [ %d %d %d %d ] = %15.7e  %15.7e\n",
--                      name, x, y, z, t,
--                      aa:real(), bb:real())
               printf("%s [ %d %d %d %d ] = %15.7e %15.7e  %15.7e\n",
                      name, x, y, z, t,
                      aa, bb, aa - bb)
            end
         end
      end
   end
   printf("---- end of %s\n\n", name)
end

function dump_4d_c(name, a, b)
   printf("==== start of %s\n", name)
   for x = 0, L[0] - 1 do
      for y = 0, L[1] - 1 do
         for z = 0, L[2] - 1 do
            for t = 0, L[3] - 1 do
               local p = {x, y, z, t}
               local aa = a[p]
               local bb = b[p]
--               printf("%s [ %d %d %d %d ] = %15.7e  %15.7e\n",
--                      name, x, y, z, t,
--                      aa:real(), bb:real())
               printf("%s [ %d %d %d %d ] = %15.7e %15.7e  %15.7e %15.7e\n",
                      name, x, y, z, t,
                      aa:real(), bb, aa:real() - bb, aa:imag())
            end
         end
      end
   end
   printf("---- end of %s\n\n", name)
end

r_sol, r_ac, r_mp = ref_solver(src4)
x_sol, x_ac, x_mp = l3_solver(src4)

check_4d("solution", r_sol, x_sol)
for i = 1, #r_ac do
   check_4d(string.format("axial[%d]", i-1), r_ac[i], x_ac[i])
end
--dump_4d_c(string.format("axial[%d]",4-1), r_ac[4], x_ac[4])

check_4d("midpoint", r_mp, x_mp)
--dump_4d_r("midpoint", r_mp, x_mp)

printf("DONE\n")


