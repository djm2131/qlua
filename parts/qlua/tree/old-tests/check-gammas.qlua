Lx = 4
dim = 4

LAT = qcd.lattice{Lx, Lx, Lx, Lx}

enc = LAT:Int(0)
for i = 0, dim - 1 do
  enc = enc * Lx + LAT:pcoord(i)
end

rnd = LAT:RandomState(1, enc)

d = rnd:gaussian_DiracFermion()

dn = d:norm2()

function check_mu(f, i, j, ij, s)
  local v = d:gamma({mu=i}):gamma({mu=j})
  local w = d:gamma({n=ij})
  print("check_mu", i, j, ij, s,
        (v-s*w):norm2()/math.sqrt(w:norm2()+v:norm2()))
end


check_mu(d, 0, 0,  0, 1.0)
check_mu(d, 0, 1,  3, -1.0)
check_mu(d, 0, 2,  5, -1.0)
check_mu(d, 0, 3,  9, -1.0)

check_mu(d, 1, 0,  3, 1.0)
check_mu(d, 1, 1,  0, 1.0)
check_mu(d, 1, 2,  6, -1.0)
check_mu(d, 1, 3, 10, -1.0)

check_mu(d, 2, 0,  5, 1.0)
check_mu(d, 2, 1,  6, 1.0)
check_mu(d, 2, 2,  0, 1.0)
check_mu(d, 2, 3, 12, -1.0)

check_mu(d, 3, 0,  9, 1.0)
check_mu(d, 3, 1, 10, 1.0)
check_mu(d, 3, 2, 12, 1.0)
check_mu(d, 3, 3,  0, 1.0)

function check_x(i, j, k, s)
  -- compute g[i] * g[j] * D and compare it with s * g[k] * D
  local v = d:gamma({n=j}):gamma({n=i}) -- notice reverse order in this notation
  local w = d:gamma({n=k})
  if (v - s * w):norm2() < 1e-5 * dn then
     if s < 0 then
        print((16 + k) .. ",")
     else
        print(k .. ",")
     end
  end
end

for n = 0, 15 do
  print("{")
  for m = 0, 15 do
    for j = 0, 15 do
      check_x(n, m, j, 1)
      check_x(n, m, j, -1)
    end
  end
  print("}")
end

print("all done")
