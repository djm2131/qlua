require "stdlib"

-- completely meaningless values of parameters just to make life interesting

Lx = 6
Lt = 12

L = qcd.lattice {Lx, Lx, Lx, Lt}

-- get a unique number of each lattice site
function rnd_init(x)
  local l_s = 1
  l_id = L:Int(0)
  for d = 0, #L - 1 do
    l_id = l_id + l_s * L:pcoord(d)
    l_s = l_s * L[d]
  end
  return L:RandomState(x, l_id)
end

-- small deviation of identity in SU(3)
function almost_su3(S, v)
  local one = L:ColorMatrix(complex(1,0))
  return one + v * S:gaussian_ColorMatrix()
end

function check_solver(x, b, name, s)
   printf("----- checking %s: %s\n", name, tostring(s))
   local y, xx = s(b)
   printf("|b| = %15.7e\n", b:norm2())
   printf("|x| = %15.7e\n", x:norm2())
   printf("y=%s, xx=%s\n", tostring(y), tostring(xx))
   printf("|y| = %15.7e\n", y:norm2())
   printf("residue: %15.7e\n", (x - y):norm2())
   printf("----- check done\n\n")
end

S = rnd_init(1984)

U = { almost_su3(S, 0.5),
      almost_su3(S, 0.5),
      almost_su3(S, 0.5),
      almost_su3(S, 0.5) }

CL = qcd.Clover(U, 0.081, 0.07, {1, 1, 1, 0})
printf("CLOVER  %s\n", tostring(CL))

DF = CL:eig_deflator(50, 10, 1e-7, 200)
printf("DEFLATOR %s\n", tostring(DF))

F = S:gaussian_DiracFermion()
G = CL:D(F)
check_solver(F, G, "standard solver", CL:solver(1e-12, 1000))
check_solver(F, G, "mixed solver",  CL:mixed_solver(1e-10, 1000, 1e-12, 1000))
eigCG = DF:mixed_solver(1e-10, 1000, 1e-12, 1000)
check_solver(F, G, "eigCG solver",  eigCG)

for i = 1, 20 do
   F = S:gaussian_DiracFermion()
   G = CL:D(F)
   printf("eigCG %5d :", i)
   eigCG(G)
   -- check_solver(F, G, string.format("eigCG[%d]", i), eigCG)
end


printf("DONE\n")

