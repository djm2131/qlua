require "stdlib"

s0 = qcd.RandomState(35, 467)
L = qcd.lattice{5,4,2}

vol = 1
for j = 0, #L - 1 do
   vol = vol * L[j]
end

printf("s0 = %s\n", tostring(s0))

printf("qcd.ColorVectorN = %s\n", tostring(qcd.ColorMatrixN))

vx = s0:gaussian_ColorMatrixN(5)

printf("vx = %s\n", tostring(vx))

function show_vector(name, v)
   for i = 0, v:colors() - 1 do
      local z = v[{c=i}]
      printf("%s[%d] = %15.7f %15.7f\n", name, i, z:real(), z:imag())
   end
   printf("\n")
end

function show_matrix(name, m)
   for i = 0, m:colors() - 1 do
      printf("%s[%d,.] ", name, i)
      for j = 0, m:colors() - 1 do
         local z = m[{a=i,b=j}]
         printf("  [%10.4f %10.4f]", z:real(), z:imag())
      end
      printf("\n")
   end
   printf("\n")
end

show_matrix("vx", vx)
lv = L:ColorMatrix(vx)
printf("lv=%s\n", tostring(lv))
printf("vol = %s\n", tostring(vol))
printf("vx = %s\n", tostring(vx))
printf("sum of lv vs V(L) * vx = %15.7e\n", (lv:sum() - vol * vx):norm2())
lz = L:ColorMatrixN(6, L:Complex(complex(1,-1)), {b=1,a=4})
lz[{0,1,0}] = s0:gaussian_ColorMatrixN(6) * 7.6
show_matrix("c4", lz[{1,2,0}])
show_matrix("lzvx", lz[{0,1,0}])

do
   local x = L:Int(0)
   for i = 0, #L - 1 do
      x = x * L[i] + L:pcoord(i)
   end
   S = L:RandomState(45673, x)
end

-- ls = S:gaussian_ColorVector()
ls = L:ColorMatrix(vx)
printf("ls = %s\n", tostring(ls))

q = ls:sum(L:MultiSet(L[0], L:pcoord(0)))
printf("ls:sum(multi) = %s\n", tostring(q))
for i, v in pairs(q) do
   show_matrix(string.format("sum(%d) diff", i), v - vol * vx / L[0])
end

printf("DONE\n")
