require "stdlib";

-- check aff writer first
-- file = "/tmp/qlua/test-file.aff"
file = "test-file.aff"

w,m = qcd.aff.Writer(file)
printf("writer: %s %s\n", tostring(w), tostring(m));

if not w then
   os.exit(1)
end

function mk_path(x, p)
  local s = x:mkpath(p)
  printf("mkpath: %s %s\n", p, tostring(s));
end

function ch_path(x, p)
  local s = x:chpath(p)
  printf("chpath: %s %s\n", p, tostring(s));
end

lx = vector.int(4)
for i = 0, 3 do
 lx[i] = 16 + i
end

dxx = vector.real(16)
for i = 0, 15 do
  dxx[i] = math.sin(i * math.pi / 16)
end

cxx = vector.complex(32)
for i = 0, 31 do
   cxx[i] = complex(math.cos(i * math.pi / 32), math.exp(- i / 32))
end

mk_path(w, "/foo/barr/x")
-- successful writes return with 0 results, force them to nils
printf("write string: %s\n", tostring(w:write("/const/name", "Jaberwokky")));
printf("write ints: %s\n", tostring(w:write("/lattice/size", lx)));
printf("write doubles: %s\n", tostring(w:write("/data", dxx)));
printf("write complex: %s\n", tostring(w:write("/comlpex/angles", cxx)));
mk_path(w, "/foo")
ch_path(w, "bazz")
mk_path(w, "fourth")
-- ch_path(w, "..")

s = w:close()
printf("w:close(): %s\n", tostring(s));

printf("\n");

r,m = qcd.aff.Reader(file)

printf("reader: %s %s\n", tostring(r), tostring(m));
if not r then
   os.exit(1)
end

x = r:read("/foo/barr/x")
printf("reading empty element: %s\n", tostring(x));

x = r:read("/const/name")
printf("reading string: %s\n", tostring(x));

x = r:read("/lattice/size")
printf("reading ints: %s\n", tostring(x));
for i = 0, #x - 1 do
   printf("  x[ %2d ] = %d\n",  i, x[i]);
end

x = r:read("/data")
printf("reading doubles: %s\n", tostring(x));
for i = 0, #x - 1 do
   printf("  x[ %2d ] = %g\n", i, x[i])
end

x = r:read("/comlpex/angles")
printf("reading complex: %s\n", tostring(x));
for i = 0, #x - 1 do
   printf("  x[ %2d ] = %s\n", i, tostring(x[i]));
end

ch_path(r, "bazz")
ch_path(r, "/foo")
ch_path(r, "barr/x")
ch_path(r, "/foo/barr")

printf("list of /\n")
for i,f in ipairs(r:list("/")) do
   printf(" %4d %20s   %s\n", i, r:kind("/" .. f), f);
end
-- ch_path(r, "/usr/bin")
-- ch_path(r, "/foo/barr")

r:close()

printf("done\n")
