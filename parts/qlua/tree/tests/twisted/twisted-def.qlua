require "stdlib"
require "gauge"

-- Check the twisted Wilson defintion.

-- use a crazy set of parameters:
L = qcd.lattice{10,4,6,8};
mass_q = complex(0.123456, -0.34905);
mass_5 = complex(-0.562369, 0.78267);
boundary = {1, -1, complex(0.6, 0.8), complex(0,1)};
tolerance = 1e-25;

-- operator definition
-------------------------------------------------------------------------------
function twisted_std(U, mq, m5, b, F)
   local X = (4.0 + mq + complex(0,1) * m5 * gamma{mu=5}) * F;
   local Ux = {};
   local i, j;

   for i = 1, #U do
      local Ui = U[i]:copy();
      L:Subset{axis=i-1, position = L[i-1] - 1}:where(function () Ui:set(U[i] * b[i]) end);
      Ux[i] = Ui;
   end

  for i = 0, #L - 1 do
     X = X - 0.5 * ((1-gamma{mu=i}) * (Ux[i+1] * (F:shift(i, "from_forward"))) +
                    (1+gamma{mu=i}) * ((Ux[i+1]:adjoin() * F):shift(i, "from_backward")))
  end

  return X
end

---- test per se.
-------------------------------------------------------------------------------
ix = L:Int(0)
for i = 0, #L - 1 do
  ix = ix * L[i] + L:pcoord(i)
end

S = L:RandomState(45683, ix);

U = {}
for i = 1, #L do
   U[i] = toSUn(S:gaussian_ColorMatrix());
end


F = S:gaussian_DiracFermion();

TW = qcd.Twisted(U, {mq = mass_q, mu = mass_5, boundary = boundary});

G3 = TW:D(F);
Gs = twisted_std(U, mass_q, mass_5, boundary, F);

function check_F(n,F,x)
   local nc = F:colors()
   for c = 0, nc - 1 do
      x.c = c
      for d = 0, qcd.Ns - 1 do
         x.d = d
         local z = F[x]
         printf("%s[%d, %d]: %20.10f %20.10f\n", n, c, d, z:real(), z:imag())
      end
   end
   printf("\n")
end



-- check_F("F ", F,  {1,1,1,1});
-- check_F("G3", G3, {1,1,1,1});
-- check_F("Gs", Gs, {1,1,1,1});
-- check_F("Gs - G3", Gs - G3, {1,1,1,2});

dx = (G3 - Gs):norm2() / F:norm2();
printf("Dirac fermion\n");
printf("|F|^2       = %.10e\n", F:norm2())
printf("|d|^2/|F|^2 = %.10e relative error\n", dx);

if (dx < tolerance) then
   printf("--- OK ----- all done\n")
else
   printf("**** SOMETHING IS WRONG\n");
end
   
