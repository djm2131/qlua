-- check that eigcg works in twisted. Only basic functionality is tested here, e.g., no crashes, parameters are
-- properly recognised, etc. meaningless values of parameters are used.
require "stdlib"
require "gauge"

L = qcd.lattice{10,4,6,8};
mass_q = complex(-0.0123456, -0.0034905);
mass_5 = complex(-0.0562369, 0.078267);
boundary = {1, -1, complex(0.6, 0.8), complex(0,1)};
eigcg_vmax= 10;
eigcg_nev = 2;
eigcg_tol = 1e-6;
eigcg_umax = 50; 

solve_count = 30;

ix = L:Int(0)
for i = 0, #L - 1 do
  ix = ix * L[i] + L:pcoord(i)
end


S = L:RandomState(45683, ix);

U = {}
for i = 1, #L do
   U[i] = toSUn(S:gaussian_ColorMatrix());
end

-- make MDWF & deflator
twisted = qcd.Twisted(U, {mq = mass_q, mu = mass_5, boundary = boundary });
twisted_eigcg_df = twisted:eig_deflator{Vmax = eigcg_vmax,
                                        Umax = eigcg_umax,
                                        Nev = eigcg_nev,
                                        eps = eigcg_tol};

twisted_eigcg_solver = twisted_eigcg_df:mixed_solver{inner_eps = 1e-6,
                                                     inner_iter = 100,
                                                     eps = 1e-20,
                                                     max_iter = 1000};

for i = 1, solve_count do
   local y = S:gaussian_DiracFermion();
   local x, x_eps, x_iter = twisted_eigcg_solver(y);
   printf("[%2d] CTRL inversion: norm2(y)=%e  norm2(x)=%e  eps=%e  iter=%d\n",
          i, y:norm2(), x:norm2(), x_eps, x_iter);
   printf("[%2d] deflator dim=%d\n\n", i, twisted_eigcg_df:current_dim());
end

printf("DONE\n");
