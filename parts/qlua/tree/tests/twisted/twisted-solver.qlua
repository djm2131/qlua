-- completely meaningless values of parameters just to make life interesting
require "stdlib"
require "gauge"


-- Check the twisted Wilson defintion.

-- use a crazy set of parameters:
L = qcd.lattice{10,4,6,8};
mass_q = complex(-0.0123456, -0.0034905);
mass_5 = complex(-0.0562369, 0.078267);
boundary = {1, -1, complex(0.6, 0.8), complex(0,1)};
tolerance = 1e-14;

-------------------------------------------------------------------------------
ix = L:Int(0)
for i = 0, #L - 1 do
  ix = ix * L[i] + L:pcoord(i)
end

S = L:RandomState(45683, ix);

U = {}
for i = 1, #L do
   U[i] = toSUn(S:gaussian_ColorMatrix());
end


F = S:gaussian_DiracFermion();
G = S:gaussian_DiracFermion()

TW = qcd.Twisted(U, {mq = mass_q, mu = mass_5, boundary = boundary});

io.stdout:write("TWISTED  " .. tostring(TW) .. "\n")

X = TW:D(F)
Y = TW:Dx(G)

function show_complex(name, v)
   printf("%s  = (%17.9e, %17.9e)\n", name, v:real(), v:imag());
end

gx = qcd.dot(G, X):sum(); show_complex("<G, D F>", gx);
yf = qcd.dot(Y, F):sum(); show_complex("<DxG, F>", yf);
dops = (gx - yf):abs() / gx:abs();
printf("conjugate def relative error %17.9e\n", dops);
if dops > tolerance then
   printf("XXX Conjugate operator mismatch\n");
   os.exit(1);
end

function show_small(name, r)
   printf("%s = %17.9e\n", name, r);
   if r > tolerance then
      printf("XXX value of %s is too large\n", name);
      os.exit(1);
   end
end

function show_fermions(name, A,B)
   local x, y, z, t, c, d;
   local L = A.lattice;
   printf("\n\n----------------------- two fermions\n");
   for x = 0, L[0] - 1 do
      for y = 0, L[1] - 1 do
         for z = 0, L[2] - 1 do
            for t = 0, L[3] - 1 do
               for c = 0, 2 do
                  for d = 0, 3 do
                     local p = {x,y,z,t,c=c,d=d};
                     local ap = A[p];
                     local bp = B[p];
                     local zv = ap / bp - 1;
--                     printf(" [%2d %2d %2d %2d  %d %d] : %18.10e %18.10e  %18.10e %18.10e\n",
--                            x,y,z,t,c,d, ap:real(), bp:real(), ap:imag(), bp:imag());
                     printf(" [%2d %2d %2d %2d  %d %d] : %18.10f  %18.10f\n",
                            x,y,z,t,c,d, zv:real(), zv:imag());
                  end
               end
            end
         end
      end
   end
   printf("---------------\n\n");
end

function check_twisted(Z)
   printf("\ncheck_twisted Z= %s\n", tostring(Z));
   local F = TW:D(Z);
   local znorm = Z:norm2();

   printf("\nregular solver\n");
   local A = TW:solver({eps = 1e-20, max_iter = 1000})(F, {log = true});
   printf("|Z| = %17.9e\n", znorm);
   printf("|F| = %17.9e\n", F:norm2());
   printf("|A| = %17.9e\n", A:norm2());
   show_small("|d|", (A-Z):norm2(), znorm);

   printf("\nmixed solver\n");
   local A = TW:mixed_solver({inner_eps = 1e-3, inner_iter = 100, eps = 1e-20, max_iter = 1000})(F, {log = true })
   printf("m|Z| = %17.9e\n", znorm);
   printf("m|F| = %17.9e\n", F:norm2());
   printf("m|A| = %17.9e\n", A:norm2());
   show_small("m|d|", (A - Z):norm2(), znorm);
end

printf("\n\nfermion solver\n");
check_twisted(S:gaussian_DiracFermion())

os.exit(0)
