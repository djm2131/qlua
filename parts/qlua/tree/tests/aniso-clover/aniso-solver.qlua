-- completely meaningless values of parameters just to make life interesting
require "stdlib"
require "gauge"

-- Check the anisotropic CLOVER solver against the operator.

-- use a crazy set of parameters:
L = qcd.lattice{10,12,6,8};
kappa = {0.1  * complex(1.4235,0.3456),
         0.35 * complex(0.1235,5.1234),
         0.09 * complex(1.065,0),
         0.06 * 0.67};
cxy = 0.15 * complex(0.3456,1.1235);
cxz = 0.17 * complex(1.35623,0.075);
cxt = 0.10 * complex(0.75626,2.125);
cyz = 0.12 * 0.563456;
cyt = 0.13 * complex(0.9234,-0.235);
czt = 0.14 * complex(0.7456,-1.235);
c_sw = {{0.0, cxy, cxz, cxt},
        {cxy, 0.0, cyz, cyt},
        {cxz, cyz, 0.0, czt},
        {cxt, cyt, czt, 0.0}};
boundary = {0, -1, complex(0.6, 0.8), complex(0,1)};
tolerance = 1e-10;

-- get a unique number of each lattice site
ix = L:Int(0)
for i = 0, #L - 1 do
  ix = ix * L[i] + L:pcoord(i)
end

S = L:RandomState(12345, ix)

U = {}
for i = 1, #L do
 U[i] = toSUn(S:gaussian_ColorMatrix())
end


F = S:gaussian_DiracFermion()
G = S:gaussian_DiracFermion()

CL = qcd.AnisotropicClover(U, {kappa = kappa, c_sw = c_sw, boundary = boundary});

io.stdout:write("CLOVER  " .. tostring(CL) .. "\n")

X = CL:D(F)
Y = CL:Dx(G)

function show_complex(name, v)
   printf("%s  = (%17.9e, %17.9e)\n", name, v:real(), v:imag());
end

gx = qcd.dot(G, X):sum(); show_complex("<G, D F>", gx);
yf = qcd.dot(Y, F):sum(); show_complex("<DxG, F>", yf);
dops = (gx - yf):abs() / gx:abs();
printf("conjugate def relative error %17.9e\n", dops);
if dops > tolerance then
   printf("XXX Conjugate operator mismatch\n");
   os.exis(1);
end

function show_small(name, r)
   printf("%s = %17.9e\n", name, r);
   if r > tolerance then
      printf("XXX value of %s is too large\n", name);
      os.exit(1);
   end
end

function check_clover(Z)
   printf("\ncheck_clover Z= %s\n", tostring(Z));
   local F = CL:D(Z);
   local znorm = Z:norm2();
   printf("\nregular solver\n");
   local A = CL:solver(1e-20,10000)(F);
   printf("|Z| = %17.9e\n", znorm);
   printf("|F| = %17.9e\n", F:norm2());
   printf("|A| = %17.9e\n", A:norm2());
   show_small("|d|", (A-Z):norm2(), znorm);
   printf("\nmixed solver\n");
   local A = CL:mixed_solver(1e-3, 100, 1e-20, 10000)(F)
   printf("m|Z| = %17.9e\n", znorm);
   printf("m|F| = %17.9e\n", F:norm2());
   printf("m|A| = %17.9e\n", A:norm2());
   show_small("m|d|", (A - Z):norm2(), znorm);
end

printf("\n\nfermion solver\n");
check_clover(S:gaussian_DiracFermion())
printf("\n\npropagator solver\n");
check_clover(S:gaussian_DiracPropagator())

os.exit(0)
