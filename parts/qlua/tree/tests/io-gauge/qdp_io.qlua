-- tests reading and writing of chroma-generated gauge field.
require "stdlib"

Lx = 4
Lt = 8
-- this is probably a bad (chroma) sample file, but it should read OK
gfile = os.getenv("QDP_FILE")
if not gfile then 
  gfile = "./tests/io-gauge/random-gauge.qio"
end
output = "xxx"

-- start with some info about QLUA
printf("QDP I/O test\n")
printf("  Ns = %d\n", qcd.Ns)
for i, v in pairs(qcd.version) do
   printf("  version[%-20s] = %s\n", tostring(i), tostring(v))
end
printf("\n")
printf("Lx = %d\n", Lx)
printf("Lt = %d\n", Lt)
printf("gauge file: %s\n\n", gfile)

-- setup gauge
L = qcd.lattice({Lx, Lx, Lx, Lt})

-- read the file
r, finfo = qcd.qdpc.Reader(L, gfile)
printf("reader: %s\n", tostring(r))
printf("info  : %s\n", tostring(finfo))

if not r then
  os.exit(1)
end

U, rinfo = r:ColorMatrix(4)
r:close()

printf("U info:\n%s\n", rinfo)
printf("U: %s\n",  tostring(U))
if  not U then
   printf("error reading U\n")
   os.exit(1)
end

for i, u in ipairs(U) do
   printf("  U[%d] = %s\n", i, tostring(u))
end

-- try writing now
function try_write(output, finfo, fmt)
   printf("try_write(output=%s, fmt=%s)\n", tostring(output), tostring(fmt))
   local out = qcd.qdpc.Writer(L, output, finfo, fmt)

   if not out then
      printf("Error creating the writer\n")
      os.exit(1)
   end

   if not out:ColorMatrix(U[1], "<?xml version=\"1.0\"?><colormatrix/>") then
      printf("Error writing a single ColorMatrix\n")
      os.exit(1)
   end
   
   if not out:ColorMatrix(U, rinfo) then
      printf("Error writing a vector of ColorMatrix\n")
      os.exit(1)
   end
   
   printf("write complete\n")
   out:close()
end

try_write(output, "fmt=none")
try_write("xxx-nil", "fmt=nil", nil)
try_write("xxx-single", "fmt=single", "single")
try_write("xxx-multi", "fmt=multi", "multi")

xx, xinfo = qcd.qdpc.Reader(L, output)
printf("xx  : %s\n", tostring(xx))
printf("info: %s\n", tostring(xinfo))

s = xx:skip()
printf("skip()= %s\n", tostring(s))

-- QIO error handling broken in MPI 
--s,f = xx:info()
--print("info().s=", s)
--print("info().f=", f)

s = xx:skip()
printf("x skip= %s\n", tostring(s))

--QIO error handling broken in MPI 
--s,f = xx:info()  -- no info, returns nil, nil
--print("x info().s=", s)
--print("x info().f=", f)

xx:close()

printf("All done\n")