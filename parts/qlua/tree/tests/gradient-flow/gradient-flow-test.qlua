require "stdlib"
require "gauge"
require "qcdlib/gauge-loops/plaq1"
require "qcdlib/gauge-loops/twist1"
require "qcdlib/gauge-loops/rect2"
require "qcdlib/gradient-flow"
require "qcdlib/symmetric-EQ"

printf("Gradient flow interface test\n\n");

-- Since the tests uses crazily expensive action
-- run on a ridiculously small lattice
lat = qcd.lattice{4, 4, 4, 12};
printf("%s\n\n", tostring(lat));

-- gauge action is a collection of closed paths with coupling constants
-- here we choose some loops and corresponding couplings.
act_params = { plaq1 = 0.54,
               twist1 = 1.24,
               rect2 = 0.235
            };

-- test params
eps0 = 0.01; -- initial flow step
eps1 = 0.10; -- final flow step
f_steps = 100; -- number of flow steps

-- random generator: keep the seed fixed, to help in testing different machines
ix = lat:Int(0)
for i = 0, #lat - 1 do
   ix = ix * lat[i] + lat:pcoord(i)
end
rndS = lat:RandomState(7465, ix);

-- random gauge field
U = {}
for i = 1, #lat do
   U[i] = toSUn(rndS:gaussian_ColorMatrix())
end
-- printf("random gauge field: %s\n", type(U));

-- force and action functions are built from the action parameters
g_force = qcdLib.GaugeLoops.flow_force(act_params);
g_action = qcdLib.GaugeLoops.action(act_params);


a0 = g_action(U);
printf("Initial action %18.10e\n", a0);

-- monitor the flow
function mon_flow(k, t, total_t, V)
   local EQ = qcdLib.symmetricEQ(V, { improved = true });
   printf("   t %8.5f, n %5d, step %7.5f, action %18.10e,   t2E %18.10e,  Q %12.7f\n",
          total_t, k, t, g_action(V),
          EQ.improvedE * total_t * total_t,
          EQ.improvedQ);
end

-- constant step
printf("Constant step flow sequence test:\n");
V = U;
for i = 1, f_steps do
   V = qcdLib.GradientFlow.flow(g_force, V, eps0);
   mon_flow(i, eps0, i * eps0, V);
end

-- Change the step size linearly:
steps = {};
for i = 0, f_steps do
   steps[i + 1] = (eps0 * (f_steps - i) + eps1 * i) / f_steps;
end
printf("Rnning an array of steps\n");
V = qcdLib.GradientFlow.flow(g_force, U, steps, { monitor = mon_flow });

-- functional step profile
function fancy_step(i)
   return eps0 + (eps1 - eps0) * i / (1 + i);
end

printf("Running a fuction-controlled steps\n");
V = qcdLib.GradientFlow.flow(g_force, U, fancy_step, {low = 0,
                                                      high = f_steps,
                                                      monitor = mon_flow });

printf("DONE\n");
