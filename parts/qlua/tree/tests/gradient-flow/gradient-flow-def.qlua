require "stdlib"
require "gauge"
require "qcdlib/gauge-loops/plaq1"
require "qcdlib/gradient-flow"

printf("Gradient flow definition test\n");
lat = qcd.lattice{8,8,8,16};

printf("%s\n\n", tostring(lat));

-- gauge action is a collection of closed paths with coupling constants
-- here we choose some loops and corresponding couplings.
act_params = { plaq1 = 1.0 };

max_delta = 1e-14; -- max acceptable different in the plaquette during the flow.

-- test params
alpha = 0.5; -- random field scale
f_count = 10; -- number of test fields

tau = 0.01;    -- gradient flow step
t_count = 100;  -- number of gradient flow iterations

-- random generator: keep the seed fixed, to help in testing different machines
ix = lat:Int(0)
for i = 0, #lat - 1 do
   ix = ix * lat[i] + lat:pcoord(i)
end
rndS = lat:RandomState(7465, ix);

g_action = qcdLib.GaugeLoops.action(act_params);

-- standard plaquette
function plaquette(U)
   local Nc = U[1]:colors();
   local v = 0.0;
   local i, j;
   local count = 0;
   for i = 1, #U do
      for j = i + 1, #U do
         count = count + 1;
         local p1 = U[i] * U[j]:shift(i-1, "from_forward");
         local p2 = U[j] * U[i]:shift(j-1, "from_forward");
         v = v + (1 - qcd.dot(p2,p1):real() / Nc);
      end
   end
   return v:sum() / (U[1].lattice:volume() * count);
end

function gen_U(s)
   local i;
   local U = {};
   for i = 1, #lat do
      U[i] = toSUn(s * i * rndS:gaussian_ColorMatrix())
   end
   return U;
end

-- gradient flow test
printf("\nTest of gradient flow: tau = %g\n", tau);
do
   local function std_force(U)
      local function staple(U, mu)
         local Nc = U[1]:colors();
         local L = U[1].lattice;
         local st = L:ColorMatrixN(Nc);
         local nu
         for nu in skip(mu, interval(1,#L)) do
            st = st + U[nu] * U[mu]:shift(nu-1,"from_forward") * U[nu]:shift(mu-1,"from_forward"):adjoin()
            st = st + (U[nu]:adjoin() * U[mu] * U[nu]:shift(mu-1,"from_forward")):shift(nu-1,"from_backward")
         end
         return st / Nc;
      end
      local F = {};
      local mu;
      for mu = 1, #U do
         F[mu] = staple(U,mu) * U[mu]:adjoin();
      end
      return F;
   end
   local loop_force = qcdLib.GaugeLoops.flow_force({plaq1 = 1.0});
   -- local loop_force = std_force;
   
   local function check(i, U, V)
      local aU = plaquette(U);
      local aV = plaquette(V);
      local delta = math.abs(aU - aV);
      printf("  gflow %3d: std %17.10e loop %17.10e, diff %17.10e\n", i, aU, aV, delta);
      if delta > max_delta then
         error("gradient flow on the plaquette differs from the reference too much");
      end
   end
      
   local U = gen_U(0.752);
   local V = U;
   check(0, U, V);
   for k = 1, t_count do
      U = qcdLib.GradientFlow.flow(std_force, U, tau);
      V = qcdLib.GradientFlow.flow(loop_force, V, tau);
      check(k, U, V);
   end
end


printf("DONE\n");
