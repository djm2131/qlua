-- gradient flow.
-- The code is adapted from the code by Evan Weinberg, weinbe2@bu.edu
-- See arXiv:1105.4749 for the original M. Leuscher's paper

function symmE(U, volume, ...)
  -- Check optional arguments.
  local flag = 0; -- Don't measure O(a^4)
  if arg.n == 1 then
    flag = arg[1];
  end
  
  if (flag ~= 0 and flag ~= 1) then
    flag = 0;
  end
  
  -- Store the result here.
  local symmE = 0;
  local symmQ = 0;
  local symmE_imp = 0;
  local symmQ_imp = 0;
  local G2 = {}
  for i = 1,4 do
        G2[i] = {};
  end
  
  local G2_imp = {}
  for i = 1,4 do
        G2_imp[i] = {};
  end
  
  -- ESW addition 4/9/2014
  -- New: also keep the field strength tensor over the lattice to construct the topological charge.
  local G_lat = {}
  for i = 1, 4 do
    G_lat[i] = {};
  end
  
  local G_lat_imp = {}
  for i = 1, 4 do
    G_lat_imp[i] = {};
  end
  
  -- Loop over all directions.
  for mu = 1,#U-1 do
    for nu = 0,mu-1 do
            -- Construct the clover term. 
        
            local four_plaq = U[nu+1] * U[mu+1]:shift(nu, "from_forward") * U[nu+1]:shift(mu, "from_forward"):adjoin() * U[mu+1]:adjoin();
                
                four_plaq = four_plaq + U[mu+1] * U[nu+1]:shift(mu, "from_forward"):shift(nu, "from_backward"):adjoin() * U[mu+1]:shift(nu, "from_backward"):adjoin() * U[nu+1]:shift(nu, "from_backward");
                
                four_plaq = four_plaq + U[mu+1]:shift(mu, "from_backward"):adjoin() * U[nu+1]:shift(mu, "from_backward") * U[mu+1]:shift(mu, "from_backward"):shift(nu, "from_forward") * U[nu+1]:adjoin();
                
                four_plaq = four_plaq + U[nu+1]:shift(nu, "from_backward"):adjoin() * U[mu+1]:shift(mu, "from_backward"):shift(nu, "from_backward"):adjoin() * U[nu+1]:shift(nu, "from_backward"):shift(mu, "from_backward") * U[mu+1]:shift(mu, "from_backward");
                
                local ScaledOne = four_plaq.lattice:ColorMatrix(complex(1.0/four_plaq:colors(), 0));
                
                local ahX = (four_plaq - four_plaq:adjoin())/2.0;
                local algX = ahX - ScaledOne * ahX:trace();
                
                -- ESW addition 4/9/2014: Keep F_uv
                G_lat[mu+1][nu+1] = algX:copy();
                G_lat[nu+1][mu+1] = -algX:copy();
                
                -- Square it!
                local squared = algX*algX;
                
                -- And sum over all lattice sites. 
                G2[mu+1][nu+1] = squared:sum();
                
                if flag == 1 then
                
                        -- ESW addition 6/30/2014: Construct some improved operators.
                        -- We're doing a three-loop improvement, which requires
                        -- 2x2 and 3x3 loops.
                        
                        -- 2x2.
                        local plaq2x2 = U[nu+1] * 
                                U[nu+1]:shift(nu, "from_forward") * 
                                U[mu+1]:shift(nu, "from_forward"):shift(nu, "from_forward") * 
                                U[mu+1]:shift(nu, "from_forward"):shift(nu, "from_forward"):shift(mu, "from_forward") * 
                                U[nu+1]:shift(mu, "from_forward"):shift(mu,"from_forward"):shift(nu,"from_forward"):adjoin() * 
                                U[nu+1]:shift(mu,"from_forward"):shift(mu,"from_forward"):adjoin() * 
                                U[mu+1]:shift(mu,"from_forward"):adjoin() * 
                                U[mu+1]:adjoin(); -- checked

                        plaq2x2 = plaq2x2 + U[mu+1] * 
                                U[mu+1]:shift(mu, "from_forward") * 
                                U[nu+1]:shift(mu, "from_forward"):shift(mu, "from_forward"):shift(nu, "from_backward"):adjoin() * 
                                U[nu+1]:shift(mu, "from_forward"):shift(mu, "from_forward"):shift(nu, "from_backward"):shift(nu,"from_backward"):adjoin() * 
                                U[mu+1]:shift(nu, "from_backward"):shift(nu, "from_backward"):shift(mu, "from_forward"):adjoin() * 
                                U[mu+1]:shift(nu, "from_backward"):shift(nu, "from_backward"):adjoin() * 
                                U[nu+1]:shift(nu, "from_backward"):shift(nu, "from_backward") * 
                                U[nu+1]:shift(nu, "from_backward"); -- checked

                        plaq2x2 = plaq2x2 + U[mu+1]:shift(mu, "from_backward"):adjoin() * 
                                U[mu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):adjoin() * 
                                U[nu+1]:shift(mu, "from_backward"):shift(mu, "from_backward") * 
                                U[nu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(nu, "from_forward") * 
                                U[mu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(nu, "from_forward"):shift(nu, "from_forward") * 
                                U[mu+1]:shift(mu, "from_backward"):shift(nu, "from_forward"):shift(nu, "from_forward") * 
                                U[nu+1]:shift(nu, "from_forward"):adjoin() * 
                                U[nu+1]:adjoin(); -- checked

                        plaq2x2 = plaq2x2 + U[nu+1]:shift(nu, "from_backward"):adjoin() * 
                                U[nu+1]:shift(nu, "from_backward"):shift(nu, "from_backward"):adjoin() * 
                                U[mu+1]:shift(mu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):adjoin() * 
                                U[mu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):adjoin() * 
                                U[nu+1]:shift(nu, "from_backward"):shift(nu, "from_backward"):shift(mu, "from_backward"):shift(mu, "from_backward") * 
                                U[nu+1]:shift(nu, "from_backward"):shift(mu, "from_backward"):shift(mu, "from_backward") * 
                                U[mu+1]:shift(mu, "from_backward"):shift(mu, "from_backward") * 
                                U[mu+1]:shift(mu, "from_backward"); -- checked
                        
                        --3x3
                        local plaq3x3 = U[nu+1] * 
                                U[nu+1]:shift(nu, "from_forward") * 
                                U[nu+1]:shift(nu, "from_forward"):shift(nu, "from_forward") * 
                                U[mu+1]:shift(nu, "from_forward"):shift(nu, "from_forward"):shift(nu, "from_forward") * 
                                U[mu+1]:shift(nu, "from_forward"):shift(nu, "from_forward"):shift(nu, "from_forward"):shift(mu, "from_forward") *
                                U[mu+1]:shift(nu, "from_forward"):shift(nu, "from_forward"):shift(nu, "from_forward"):shift(mu, "from_forward"):shift(mu, "from_forward") *
                                U[nu+1]:shift(mu, "from_forward"):shift(mu,"from_forward"):shift(mu, "from_forward"):shift(nu, "from_forward"):shift(nu,"from_forward"):adjoin() * 
                                U[nu+1]:shift(mu, "from_forward"):shift(mu,"from_forward"):shift(mu, "from_forward"):shift(nu,"from_forward"):adjoin() * 
                                U[nu+1]:shift(mu, "from_forward"):shift(mu,"from_forward"):shift(mu, "from_forward"):adjoin() * 
                                U[mu+1]:shift(mu, "from_forward"):shift(mu, "from_forward"):adjoin() * 
                                U[mu+1]:shift(mu, "from_forward"):adjoin() * 
                                U[mu+1]:adjoin();

                        plaq3x3 = plaq3x3 + U[mu+1] * 
                                U[mu+1]:shift(mu, "from_forward") * 
                                U[mu+1]:shift(mu, "from_forward"):shift(mu, "from_forward") *
                                U[nu+1]:shift(mu, "from_forward"):shift(mu, "from_forward"):shift(mu, "from_forward"):shift(nu, "from_backward"):adjoin() * 
                                U[nu+1]:shift(mu, "from_forward"):shift(mu, "from_forward"):shift(mu, "from_forward"):shift(nu, "from_backward"):shift(nu, "from_backward"):adjoin() * 
                                U[nu+1]:shift(mu, "from_forward"):shift(mu, "from_forward"):shift(mu, "from_forward"):shift(nu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):adjoin() * 
                                U[mu+1]:shift(nu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):shift(mu, "from_forward"):shift(mu, "from_forward"):adjoin() * 
                                U[mu+1]:shift(nu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):shift(mu, "from_forward"):adjoin() * 
                                U[mu+1]:shift(nu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):adjoin() * 
                                U[nu+1]:shift(nu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward") * 
                                U[nu+1]:shift(nu, "from_backward"):shift(nu, "from_backward") * 
                                U[nu+1]:shift(nu, "from_backward");

                        plaq3x3 = plaq3x3 + U[mu+1]:shift(mu, "from_backward"):adjoin() * 
                                U[mu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):adjoin() * 
                                U[mu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(mu, "from_backward"):adjoin() * 
                                U[nu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(mu, "from_backward") * 
                                U[nu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(mu, "from_backward"):shift(nu, "from_forward") * 
                                U[nu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(mu, "from_backward"):shift(nu, "from_forward"):shift(nu, "from_forward") * 
                                U[mu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(mu, "from_backward"):shift(nu, "from_forward"):shift(nu, "from_forward"):shift(nu, "from_forward") * 
                                U[mu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(nu, "from_forward"):shift(nu, "from_forward"):shift(nu, "from_forward") * 
                                U[mu+1]:shift(mu, "from_backward"):shift(nu, "from_forward"):shift(nu, "from_forward"):shift(nu, "from_forward") * 
                                U[nu+1]:shift(nu, "from_forward"):shift(nu, "from_forward"):adjoin() * 
                                U[nu+1]:shift(nu, "from_forward"):adjoin() * 
                                U[nu+1]:adjoin();

                        plaq3x3 = plaq3x3 + U[nu+1]:shift(nu, "from_backward"):adjoin() * 
                                U[nu+1]:shift(nu, "from_backward"):shift(nu, "from_backward"):adjoin() * 
                                U[nu+1]:shift(nu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):adjoin() * 
                                U[mu+1]:shift(mu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):adjoin() * 
                                U[mu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):adjoin() * 
                                U[mu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(mu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):adjoin() * 
                                U[nu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(mu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward") * 
                                U[nu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(mu, "from_backward"):shift(nu, "from_backward"):shift(nu, "from_backward") * 
                                U[nu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(mu, "from_backward"):shift(nu, "from_backward") * 
                                U[mu+1]:shift(mu, "from_backward"):shift(mu, "from_backward"):shift(mu, "from_backward") * 
                                U[mu+1]:shift(mu, "from_backward"):shift(mu, "from_backward") * 
                                U[mu+1]:shift(mu, "from_backward");
                                
                        -- Form a combination.
                        local k5 = 1.0/90.0;
                        local plaq_combo = (19.0/9.0-55.0*k5)*four_plaq + (1.0/36.0 - 16.0*k5)*plaq2x2 + k5*plaq3x3;
                        
                        -- Traceless anithermitian projection. Borrowed verbatim from
                        -- the function "toSUn" in the gauge.qlua qlib file.
                        
                        local ahX_imp = (plaq_combo - plaq_combo:adjoin())/2.0;
                        local algX_imp = ahX_imp - ScaledOne * ahX_imp:trace();
                        
                        -- ESW addition 4/9/2014: Keep F_uv
                        G_lat_imp[mu+1][nu+1] = algX_imp:copy();
                        G_lat_imp[nu+1][mu+1] = -algX_imp:copy();
                        
                        -- Square it!
                        local squared_imp = algX_imp*algX_imp;
                        
                        -- And sum over all lattice sites. 
                        G2_imp[mu+1][nu+1] = squared_imp:sum();
                end
                
                
        end -- nu
  end -- mu
  
  -- E = 1/4 G_{mu nu}^a G_{mu nu}^a
  -- Other factors have to do with trace normalizations,
  -- and the fact we average over all directions. 
  -- Volume is simply the number of lattice sites, there must
  -- be some good way to compute this from U. 
  for mu = 2,#U do
    for nu = 1,mu-1 do
          local E_term = G2[mu][nu]:trace():real();
          E_term = E_term / (-16.0 * volume);
          symmE = symmE + E_term;
          
          if flag == 1 then
            local E_term_imp = G2_imp[mu][nu]:trace():real();
            E_term_imp = E_term_imp / (-16.0 * volume);
            symmE_imp = symmE_imp + E_term_imp;
          end
        end --nu
  end --mu
  
  -- ESW addition 4/9/2014: Q = 1/(32pi^2) eps_uvrs G_uv^a G_rs^a
  -- Hopefully the normalization is correct?
  
  -- Unimproved
  
  -- XYZT
  tmp = G_lat[1][2]*G_lat[3][4];
  Q_term = tmp:sum():trace():real();
  symmQ = symmQ + Q_term;
  
  -- XTYZ
  tmp = G_lat[1][4]*G_lat[2][3];
  Q_term = tmp:sum():trace():real();
  symmQ = symmQ + Q_term;
  
  -- XZTY
  tmp = G_lat[1][3]*G_lat[4][2];
  Q_term = tmp:sum():trace():real();
  symmQ = symmQ + Q_term;
  
  -- Now normalize. 
  -- We have a 1/4 factor for each F_uv, to get to dividing by 16.
  -- We also multiply by 1/(32pi^2)*8 (since there are 24 epsilon 
  -- terms, but because of symmetry we only need to grab 3.)

  symmQ = -symmQ/(16.0*4.0*math.pi*math.pi);

  if flag == 1 then
                -- Improved.

                -- XYZT
                tmp = G_lat_imp[1][2]*G_lat_imp[3][4];
                Q_term_imp = tmp:sum():trace():real();
                symmQ_imp = symmQ_imp + Q_term_imp;

                -- XTYZ
                tmp = G_lat_imp[1][4]*G_lat_imp[2][3];
                Q_term_imp = tmp:sum():trace():real();
                symmQ_imp = symmQ_imp + Q_term_imp;

                -- XZTY
                tmp = G_lat_imp[1][3]*G_lat_imp[4][2];
                Q_term_imp = tmp:sum():trace():real();
                symmQ_imp = symmQ_imp + Q_term_imp;

                -- Now normalize. 
                -- We have a 1/4 factor for each F_uv, to get to dividing by 16.
                -- We also multiply by 1/(32pi^2)*8 (since there are 24 epsilon 
                -- terms, but because of symmetry we only need to grab 3.)

                symmQ_imp = -symmQ_imp/(16.0*4.0*math.pi*math.pi);
  end
  
  if flag == 0 then
        return {symmetricE = symmE, symmetricQ = symmQ};
  elseif flag == 1 then
        return {symmetricE = symmE, symmetricQ = symmQ, improvedE = symmE_imp, improvedQ = symmQ_imp};
  end
end