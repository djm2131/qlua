require "stdlib"
require "gauge"

L = qcd.lattice{4,4,4,8}
kappa = 1.4235
c_sw = 2.3344

function printf(fmt, ...)
  io.stdout:write(string.format(fmt, ...))
end

local function clovF(i,j)
  local Ujp = U[j]:shift(i - 1, "from_forward")
  local Uipx = U[i]:shift(j - 1, "from_forward"):adjoin()
  local Sl = U[j]:adjoin() * U[i] * Ujp
  local C01 = Sl * Uipx  -- at (0,1)
  local C11 = Uipx * Sl  -- at (1,1)
  local Su = Ujp * Uipx * U[j]:adjoin()
  local C00 = U[i] * Su -- at (0,0)
  local C10 = Su * U[i] -- at (1,0)
  local F = C00 +
            C01:shift(j - 1, "to_forward") +
            (C10 + C11:shift(j - 1, "to_forward")):shift(i - 1, "to_forward")
  return (F - F:adjoin()) / complex(0,8)
end

ix = L:Int(0)
for i = 0, #L - 1 do
  ix = ix * L[i] + L:pcoord(i)
end

S = L:RandomState(12345, ix)

U = {}
for i = 1, #L do
 U[i] = toSUn(S:gaussian_ColorMatrix())
end

CL = qcd.Clover(U, kappa, c_sw, {1, 1, 1, -1})

P = CL:inv_clovterm()

Leven = L:Subset("even")
Lodd  = L:Subset("odd")

Leven:where(function() enorm = P:norm2() end)
Lodd :where(function() onorm = P:norm2() end)

printf("even %g, odd %g\n", enorm, onorm)

X = L:DiracPropagator(P)
for i = 1, #L do
  for j = i + 1, #L do
     X = X - kappa * c_sw * clovF(i,j) * 
             ((gamma{mu=i-1} * gamma{mu=j-1}) * complex(0,1) * P)
  end
end

for c=0,2 do
  for d=0,3 do
     D = L:DiracFermion()
     D[{c=c,d=d}] = L:Complex(1)
     X[{c=c,d=d}] = X[{c=c,d=d}] - D
  end
end

Leven:where(function() enorm = X:norm2() end)
Lodd :where(function() onorm = X:norm2() end)

printf("even %g, odd %g\n", enorm, onorm)
