package.path = package.path .. ';qlib-lhpc/?.qlua'

require "gauge"
require "ape-smear"
require "stdlib"
require "lhpc-std"
require "qdpc_io"
require "latvec"

L = qcd.lattice(latsize)

rnd = L:RandomState(rnd_seed, 
        L:pcoord(0) + L[0] * (
        L:pcoord(1) + L[1] * (
        L:pcoord(2) + L[2] * (
        L:pcoord(3) ) ) ) )
  
gauge_u = qcd.nersc.read_gauge(L, gauge_file)
gauge_u = APE_smear(gauge_u, ape_alpha, ape_N, ape_accu, ape_maxiter, -1) 
printf("APE(%f, %3d) : plaq = %f\n", ape_alpha, ape_N, calc_plaq_av(gauge_u))




clover = qcd.Clover(gauge_u, clover_kappa, clover_csw, ferm_bc) 
clover_eigcg_df = clover:eig_deflator(eigcg_vmax, eigcg_nev, eigcg_tol, eigcg_umax)
clover_eigcg_solver = clover_eigcg_df:mixed_solver(
                        mixcg_tol1, mixcg_maxiter1, 
                        mixcg_tol, mixcg_maxiter)

tot_timer = timer('total')
for i = 0, eigcg_nsol - 1 do
  timeri = timer(string.format('sol #%02d', i))
  y = rnd:gaussian_DiracFermion()
  x = clover_eigcg_solver(y)
  printf('df_current_dim = %d\n', clover_eigcg_df:current_dim())
  timeri('done')
end
tot_timer('done')

-- print evalues
evals = clover_eigcg_df:eigenvalues()
printf("str(evals)=%s\n", tostring(evals))
for i=0, #evals-1 do 
  printf("eval[%04d]=%e\n", i, evals[i])
end


-- control inversion with full deflator: check iters & final eps
y = rnd:gaussian_DiracFermion()
x, x_eps, x_iter = clover_eigcg_solver(y)
printf("CTRL inversion: norm2(y)=%e  norm2(x)=%e  eps=%e  iter=%d\n",
       y:norm2(), x:norm2(), x_eps, x_iter)
qdp_w = open_qdpc_write(L, ctrl_vec_file, "", "single")
qdp_w:DiracFermion(y, "rgaussian-random src")
qdp_w:DiracFermion(x, "Dinv.y")
qdp_w:close()

 
-- save vectors 
df_save_timer = timer("save_df_space")
df_dim = clover_eigcg_df:current_dim()
qdp_w = open_qdpc_write(L, df_vecs_file, "", df_vec_save_qio_format)
if df_vec_save_pack_eopc then
  for i = 0, (df_dim + 1) / 2 - 1 do
    if 2*i + 1 < df_dim then 
      vec_pack = latvec_eopc_pair_to_single(
                    L:Subset("even"),
                    clover_eigcg_df:get_vector(2*i),
                    clover_eigcg_df:get_vector(2*i + 1))
    else
      vec_pack = clover_eigcg_df:get_vector(2*i)
    end
    qdp_w:DiracFermion(vec_pack, "")
  end                   
else
  for i = 0, df_dim - 1 do
    vec_i = clover_eigcg_df:get_vector(i)
  --  print_latvec_eo_norm2(vec_i, string.format("evec[%02d]", i))
    qdp_w:DiracFermion(vec_i, "")
  end
end
qdp_w:close()
df_save_timer("done")

