require "stdlib"
require "gauge"

L = qcd.lattice{4,4,4,8}
kappa = 1.4235
c_sw = 2.3344

-- Check that QLUA does the Right Thing when building the clover operator.

-------------------------------------------------------------------------------
function printf(fmt, ...)
  io.stdout:write(string.format(fmt, ...))
end

local function clovF(i,j)
  local Ujp = U[j]:shift(i - 1, "from_forward")
  local Uipx = U[i]:shift(j - 1, "from_forward"):adjoin()
  local Sl = U[j]:adjoin() * U[i] * Ujp
  local C01 = Sl * Uipx  -- at (0,1)
  local C11 = Uipx * Sl  -- at (1,1)
  local Su = Ujp * Uipx * U[j]:adjoin()
  local C00 = U[i] * Su -- at (0,0)
  local C10 = Su * U[i] -- at (1,0)
  local F = C00 +
            C01:shift(j - 1, "to_forward") +
            (C10 + C11:shift(j - 1, "to_forward")):shift(i - 1, "to_forward")
  return (F - F:adjoin()) / complex(0,8)
end

function clover_std(U, k, c, F)
  local X = F;

  for i = 0, #L - 2 do
    X = X - kappa * 
         ((1-gamma{mu=i}) * (U[i+1] * (F:shift(i, "from_forward"))) +
          (1+gamma{mu=i}) * ((U[i+1]:adjoin() * F):shift(i, "from_backward")))
  end

  -- antiperiodic bc in d=3 !!!
  local U4 = U[4]:copy()
  L:Subset{axis=3, position=L[3]-1}:where(function () U4:set(-U[4]) end)
  X = X - kappa * 
       ((1-gamma{mu=3}) * (U4 * (F:shift(3, "from_forward"))) +
        (1+gamma{mu=3}) * ((U4:adjoin() * F):shift(3, "from_backward")))

  for i = 1, #L do
    for j = i + 1, #L do
       X = X - kappa * c_sw * clovF(i,j) * 
               ((gamma{mu=i-1} * gamma{mu=j-1}) * complex(0,1) * F)
    end
  end

  return X
end

-------------------------------------------------------------------------------
volume = 1
for i = 0, #L - 1 do
  volume = volume * L[i]
end

ix = L:Int(0)
for i = 0, #L - 1 do
  ix = ix * L[i] + L:pcoord(i)
end

S = L:RandomState(12345, ix)

U = {}
U[1] = toSUn(S:gaussian_ColorMatrix())
for i = 2, #L do
 U[i] = U[1]
end


F = S:gaussian_DiracFermion()

CL = qcd.Clover(U, kappa, c_sw, {1, 1, 1, -1})

G3 = CL:D(F)
Gs = clover_std(U, kappa, c_sw, F)

function check_F(n,F,x)
   local nc = F:colors()
   for c = 0, nc - 1 do
      x.c = c
      for d = 0, qcd.Ns - 1 do
         x.d = d
         local z = F[x]
         printf("%s[%d, %d]: %20.10f %20.10f\n", n, c, d, z:real(), z:imag())
      end
   end
   printf("\n")
end

printf("|F|^2 = %.10e\n", F:norm2())
printf("|d|^2 = %.10e\n", (G3 - Gs):norm2())

P = S:gaussian_DiracPropagator()
T = CL:D(P)
X = L:DiracPropagator()

for c = 0, P:colors() - 1 do
  for d = 0, qcd.Ns - 1 do
    X[{c=c,d=d}] = CL:D(P[{c=c,d=d}])
  end
end

printf("|P|^2 = %.10e\n", P:norm2())
printf("|s|^2 = %.10e\n", (T - X):norm2())

printf("-------- all done\n")
